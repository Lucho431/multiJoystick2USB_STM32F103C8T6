
joystickUSB_STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a3c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005b48  08005b48  00015b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bb0  08005bb0  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  08005bb0  08005bb0  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005bb0  08005bb0  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bb0  08005bb0  00015bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bb4  08005bb4  00015bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08005bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b0  20000164  08005d1c  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  20000914  08005d1c  00020914  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fefc  00000000  00000000  0002018d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de8  00000000  00000000  00030089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00032e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  00033dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e64  00000000  00000000  00034b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010dab  00000000  00000000  0004b9f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000743db  00000000  00000000  0005c79f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0b7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db4  00000000  00000000  000d0bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000164 	.word	0x20000164
 8000128:	00000000 	.word	0x00000000
 800012c:	08005b30 	.word	0x08005b30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000168 	.word	0x20000168
 8000148:	08005b30 	.word	0x08005b30

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b3a      	ldr	r3, [pc, #232]	; (800024c <MX_GPIO_Init+0x100>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a39      	ldr	r2, [pc, #228]	; (800024c <MX_GPIO_Init+0x100>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b37      	ldr	r3, [pc, #220]	; (800024c <MX_GPIO_Init+0x100>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b34      	ldr	r3, [pc, #208]	; (800024c <MX_GPIO_Init+0x100>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a33      	ldr	r2, [pc, #204]	; (800024c <MX_GPIO_Init+0x100>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b31      	ldr	r3, [pc, #196]	; (800024c <MX_GPIO_Init+0x100>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b2e      	ldr	r3, [pc, #184]	; (800024c <MX_GPIO_Init+0x100>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a2d      	ldr	r2, [pc, #180]	; (800024c <MX_GPIO_Init+0x100>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b2b      	ldr	r3, [pc, #172]	; (800024c <MX_GPIO_Init+0x100>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b28      	ldr	r3, [pc, #160]	; (800024c <MX_GPIO_Init+0x100>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a27      	ldr	r2, [pc, #156]	; (800024c <MX_GPIO_Init+0x100>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b25      	ldr	r3, [pc, #148]	; (800024c <MX_GPIO_Init+0x100>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	4822      	ldr	r0, [pc, #136]	; (8000250 <MX_GPIO_Init+0x104>)
 80001c8:	f000 fe37 	bl	8000e3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_DB9_PIN7_GPIO_Port, OUT_DB9_PIN7_Pin, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	2108      	movs	r1, #8
 80001d0:	4820      	ldr	r0, [pc, #128]	; (8000254 <MX_GPIO_Init+0x108>)
 80001d2:	f000 fe32 	bl	8000e3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80001d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001dc:	2301      	movs	r3, #1
 80001de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e0:	2300      	movs	r3, #0
 80001e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001e4:	2302      	movs	r3, #2
 80001e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001e8:	f107 0310 	add.w	r3, r7, #16
 80001ec:	4619      	mov	r1, r3
 80001ee:	4818      	ldr	r0, [pc, #96]	; (8000250 <MX_GPIO_Init+0x104>)
 80001f0:	f000 fc88 	bl	8000b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IN_DB9_PIN9_Pin|IN_DB9_PIN6_Pin;
 80001f4:	23c0      	movs	r3, #192	; 0xc0
 80001f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001f8:	2300      	movs	r3, #0
 80001fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fc:	2300      	movs	r3, #0
 80001fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000200:	f107 0310 	add.w	r3, r7, #16
 8000204:	4619      	mov	r1, r3
 8000206:	4814      	ldr	r0, [pc, #80]	; (8000258 <MX_GPIO_Init+0x10c>)
 8000208:	f000 fc7c 	bl	8000b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = IN_DB9_PIN4_Pin|IN_DB9_PIN3_Pin|IN_DB9_PIN2_Pin|IN_DB9_PIN1_Pin;
 800020c:	f640 4303 	movw	r3, #3075	; 0xc03
 8000210:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000212:	2300      	movs	r3, #0
 8000214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000216:	2300      	movs	r3, #0
 8000218:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800021a:	f107 0310 	add.w	r3, r7, #16
 800021e:	4619      	mov	r1, r3
 8000220:	480c      	ldr	r0, [pc, #48]	; (8000254 <MX_GPIO_Init+0x108>)
 8000222:	f000 fc6f 	bl	8000b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_DB9_PIN7_Pin;
 8000226:	2308      	movs	r3, #8
 8000228:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800022a:	2301      	movs	r3, #1
 800022c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800022e:	2300      	movs	r3, #0
 8000230:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000232:	2302      	movs	r3, #2
 8000234:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_DB9_PIN7_GPIO_Port, &GPIO_InitStruct);
 8000236:	f107 0310 	add.w	r3, r7, #16
 800023a:	4619      	mov	r1, r3
 800023c:	4805      	ldr	r0, [pc, #20]	; (8000254 <MX_GPIO_Init+0x108>)
 800023e:	f000 fc61 	bl	8000b04 <HAL_GPIO_Init>

}
 8000242:	bf00      	nop
 8000244:	3720      	adds	r7, #32
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40021000 	.word	0x40021000
 8000250:	40011000 	.word	0x40011000
 8000254:	40010c00 	.word	0x40010c00
 8000258:	40010800 	.word	0x40010800

0800025c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000260:	f000 fae0 	bl	8000824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000264:	f000 f934 	bl	80004d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000268:	f7ff ff70 	bl	800014c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800026c:	f005 f888 	bl	8005380 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000270:	f000 fa3e 	bl	80006f0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000274:	2201      	movs	r2, #1
 8000276:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027a:	488d      	ldr	r0, [pc, #564]	; (80004b0 <main+0x254>)
 800027c:	f000 fddd 	bl	8000e3a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OUT_DB9_PIN7_GPIO_Port, OUT_DB9_PIN7_Pin, 1); //IDLE
 8000280:	2201      	movs	r2, #1
 8000282:	2108      	movs	r1, #8
 8000284:	488b      	ldr	r0, [pc, #556]	; (80004b4 <main+0x258>)
 8000286:	f000 fdd8 	bl	8000e3a <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim3);
 800028a:	488b      	ldr	r0, [pc, #556]	; (80004b8 <main+0x25c>)
 800028c:	f002 f985 	bl	800259a <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flag_tim3 != 0){
 8000290:	4b8a      	ldr	r3, [pc, #552]	; (80004bc <main+0x260>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d0fb      	beq.n	8000290 <main+0x34>

		  reporteUsb.ejeX = 0;
 8000298:	4b89      	ldr	r3, [pc, #548]	; (80004c0 <main+0x264>)
 800029a:	2200      	movs	r2, #0
 800029c:	705a      	strb	r2, [r3, #1]
		  reporteUsb.ejeY = 0;
 800029e:	4b88      	ldr	r3, [pc, #544]	; (80004c0 <main+0x264>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	709a      	strb	r2, [r3, #2]
		  reporteUsb.botones = 0;
 80002a4:	4b86      	ldr	r3, [pc, #536]	; (80004c0 <main+0x264>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	701a      	strb	r2, [r3, #0]
		  joystickTipe = 0;
 80002aa:	4b86      	ldr	r3, [pc, #536]	; (80004c4 <main+0x268>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(OUT_DB9_PIN7_GPIO_Port, OUT_DB9_PIN7_Pin, 0); //1 low
 80002b0:	2200      	movs	r2, #0
 80002b2:	2108      	movs	r1, #8
 80002b4:	487f      	ldr	r0, [pc, #508]	; (80004b4 <main+0x258>)
 80002b6:	f000 fdc0 	bl	8000e3a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(OUT_DB9_PIN7_GPIO_Port, OUT_DB9_PIN7_Pin, 1); //1 high
 80002ba:	2201      	movs	r2, #1
 80002bc:	2108      	movs	r1, #8
 80002be:	487d      	ldr	r0, [pc, #500]	; (80004b4 <main+0x258>)
 80002c0:	f000 fdbb 	bl	8000e3a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(OUT_DB9_PIN7_GPIO_Port, OUT_DB9_PIN7_Pin, 0); //2 low
 80002c4:	2200      	movs	r2, #0
 80002c6:	2108      	movs	r1, #8
 80002c8:	487a      	ldr	r0, [pc, #488]	; (80004b4 <main+0x258>)
 80002ca:	f000 fdb6 	bl	8000e3a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(OUT_DB9_PIN7_GPIO_Port, OUT_DB9_PIN7_Pin, 1); //2 high
 80002ce:	2201      	movs	r2, #1
 80002d0:	2108      	movs	r1, #8
 80002d2:	4878      	ldr	r0, [pc, #480]	; (80004b4 <main+0x258>)
 80002d4:	f000 fdb1 	bl	8000e3a <HAL_GPIO_WritePin>

		  if ( !HAL_GPIO_ReadPin(IN_DB9_PIN1_GPIO_Port, IN_DB9_PIN1_Pin) ){ //UP
 80002d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002dc:	4875      	ldr	r0, [pc, #468]	; (80004b4 <main+0x258>)
 80002de:	f000 fd95 	bl	8000e0c <HAL_GPIO_ReadPin>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d102      	bne.n	80002ee <main+0x92>
			  reporteUsb.ejeY = -128;
 80002e8:	4b75      	ldr	r3, [pc, #468]	; (80004c0 <main+0x264>)
 80002ea:	2280      	movs	r2, #128	; 0x80
 80002ec:	709a      	strb	r2, [r3, #2]
		  }
		  if ( !HAL_GPIO_ReadPin(IN_DB9_PIN2_GPIO_Port, IN_DB9_PIN2_Pin) ){ //DOWN
 80002ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002f2:	4870      	ldr	r0, [pc, #448]	; (80004b4 <main+0x258>)
 80002f4:	f000 fd8a 	bl	8000e0c <HAL_GPIO_ReadPin>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d102      	bne.n	8000304 <main+0xa8>
			  reporteUsb.ejeY = 127;
 80002fe:	4b70      	ldr	r3, [pc, #448]	; (80004c0 <main+0x264>)
 8000300:	227f      	movs	r2, #127	; 0x7f
 8000302:	709a      	strb	r2, [r3, #2]
		  }
		  if ( !HAL_GPIO_ReadPin(IN_DB9_PIN3_GPIO_Port, IN_DB9_PIN3_Pin) ){ //LEFT
 8000304:	2102      	movs	r1, #2
 8000306:	486b      	ldr	r0, [pc, #428]	; (80004b4 <main+0x258>)
 8000308:	f000 fd80 	bl	8000e0c <HAL_GPIO_ReadPin>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d102      	bne.n	8000318 <main+0xbc>
			  reporteUsb.ejeX = -128;
 8000312:	4b6b      	ldr	r3, [pc, #428]	; (80004c0 <main+0x264>)
 8000314:	2280      	movs	r2, #128	; 0x80
 8000316:	705a      	strb	r2, [r3, #1]
		  }
		  if ( !HAL_GPIO_ReadPin(IN_DB9_PIN4_GPIO_Port, IN_DB9_PIN4_Pin) ){ //RIGHT
 8000318:	2101      	movs	r1, #1
 800031a:	4866      	ldr	r0, [pc, #408]	; (80004b4 <main+0x258>)
 800031c:	f000 fd76 	bl	8000e0c <HAL_GPIO_ReadPin>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d102      	bne.n	800032c <main+0xd0>
			  reporteUsb.ejeX = 127;
 8000326:	4b66      	ldr	r3, [pc, #408]	; (80004c0 <main+0x264>)
 8000328:	227f      	movs	r2, #127	; 0x7f
 800032a:	705a      	strb	r2, [r3, #1]
		  }
		  if ( !HAL_GPIO_ReadPin(IN_DB9_PIN6_GPIO_Port, IN_DB9_PIN6_Pin) ){ //B
 800032c:	2180      	movs	r1, #128	; 0x80
 800032e:	4866      	ldr	r0, [pc, #408]	; (80004c8 <main+0x26c>)
 8000330:	f000 fd6c 	bl	8000e0c <HAL_GPIO_ReadPin>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d106      	bne.n	8000348 <main+0xec>
			  reporteUsb.botones |= 0b10;
 800033a:	4b61      	ldr	r3, [pc, #388]	; (80004c0 <main+0x264>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	f043 0302 	orr.w	r3, r3, #2
 8000342:	b2da      	uxtb	r2, r3
 8000344:	4b5e      	ldr	r3, [pc, #376]	; (80004c0 <main+0x264>)
 8000346:	701a      	strb	r2, [r3, #0]
		  }
		  if ( !HAL_GPIO_ReadPin(IN_DB9_PIN9_GPIO_Port, IN_DB9_PIN9_Pin) ){ //C
 8000348:	2140      	movs	r1, #64	; 0x40
 800034a:	485f      	ldr	r0, [pc, #380]	; (80004c8 <main+0x26c>)
 800034c:	f000 fd5e 	bl	8000e0c <HAL_GPIO_ReadPin>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d106      	bne.n	8000364 <main+0x108>
			  reporteUsb.botones |= 0b100;
 8000356:	4b5a      	ldr	r3, [pc, #360]	; (80004c0 <main+0x264>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	f043 0304 	orr.w	r3, r3, #4
 800035e:	b2da      	uxtb	r2, r3
 8000360:	4b57      	ldr	r3, [pc, #348]	; (80004c0 <main+0x264>)
 8000362:	701a      	strb	r2, [r3, #0]
		  }

		  HAL_GPIO_WritePin(OUT_DB9_PIN7_GPIO_Port, OUT_DB9_PIN7_Pin, 0); //3 low
 8000364:	2200      	movs	r2, #0
 8000366:	2108      	movs	r1, #8
 8000368:	4852      	ldr	r0, [pc, #328]	; (80004b4 <main+0x258>)
 800036a:	f000 fd66 	bl	8000e3a <HAL_GPIO_WritePin>

		  if ( !HAL_GPIO_ReadPin(IN_DB9_PIN3_GPIO_Port, IN_DB9_PIN3_Pin) && !HAL_GPIO_ReadPin(IN_DB9_PIN4_GPIO_Port, IN_DB9_PIN4_Pin) ){ //deteccion de 3 botones
 800036e:	2102      	movs	r1, #2
 8000370:	4850      	ldr	r0, [pc, #320]	; (80004b4 <main+0x258>)
 8000372:	f000 fd4b 	bl	8000e0c <HAL_GPIO_ReadPin>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d109      	bne.n	8000390 <main+0x134>
 800037c:	2101      	movs	r1, #1
 800037e:	484d      	ldr	r0, [pc, #308]	; (80004b4 <main+0x258>)
 8000380:	f000 fd44 	bl	8000e0c <HAL_GPIO_ReadPin>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d102      	bne.n	8000390 <main+0x134>
			  joystickTipe = 3;
 800038a:	4b4e      	ldr	r3, [pc, #312]	; (80004c4 <main+0x268>)
 800038c:	2203      	movs	r2, #3
 800038e:	701a      	strb	r2, [r3, #0]
		  }
		  if ( !HAL_GPIO_ReadPin(IN_DB9_PIN1_GPIO_Port, IN_DB9_PIN1_Pin) && !HAL_GPIO_ReadPin(IN_DB9_PIN2_GPIO_Port, IN_DB9_PIN2_Pin) ){ //deteccion de 6 botones
 8000390:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000394:	4847      	ldr	r0, [pc, #284]	; (80004b4 <main+0x258>)
 8000396:	f000 fd39 	bl	8000e0c <HAL_GPIO_ReadPin>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d10a      	bne.n	80003b6 <main+0x15a>
 80003a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003a4:	4843      	ldr	r0, [pc, #268]	; (80004b4 <main+0x258>)
 80003a6:	f000 fd31 	bl	8000e0c <HAL_GPIO_ReadPin>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d102      	bne.n	80003b6 <main+0x15a>
			  joystickTipe = 6;
 80003b0:	4b44      	ldr	r3, [pc, #272]	; (80004c4 <main+0x268>)
 80003b2:	2206      	movs	r2, #6
 80003b4:	701a      	strb	r2, [r3, #0]
		  }
		  if ( !HAL_GPIO_ReadPin(IN_DB9_PIN6_GPIO_Port, IN_DB9_PIN6_Pin) ){ //A
 80003b6:	2180      	movs	r1, #128	; 0x80
 80003b8:	4843      	ldr	r0, [pc, #268]	; (80004c8 <main+0x26c>)
 80003ba:	f000 fd27 	bl	8000e0c <HAL_GPIO_ReadPin>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d106      	bne.n	80003d2 <main+0x176>
			  reporteUsb.botones |= 0b1;
 80003c4:	4b3e      	ldr	r3, [pc, #248]	; (80004c0 <main+0x264>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	b2da      	uxtb	r2, r3
 80003ce:	4b3c      	ldr	r3, [pc, #240]	; (80004c0 <main+0x264>)
 80003d0:	701a      	strb	r2, [r3, #0]
		  }
		  if ( !HAL_GPIO_ReadPin(IN_DB9_PIN9_GPIO_Port, IN_DB9_PIN9_Pin) ){ //start
 80003d2:	2140      	movs	r1, #64	; 0x40
 80003d4:	483c      	ldr	r0, [pc, #240]	; (80004c8 <main+0x26c>)
 80003d6:	f000 fd19 	bl	8000e0c <HAL_GPIO_ReadPin>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d106      	bne.n	80003ee <main+0x192>
			  reporteUsb.botones |= 0b1000;
 80003e0:	4b37      	ldr	r3, [pc, #220]	; (80004c0 <main+0x264>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	f043 0308 	orr.w	r3, r3, #8
 80003e8:	b2da      	uxtb	r2, r3
 80003ea:	4b35      	ldr	r3, [pc, #212]	; (80004c0 <main+0x264>)
 80003ec:	701a      	strb	r2, [r3, #0]
		  }

		  HAL_GPIO_WritePin(OUT_DB9_PIN7_GPIO_Port, OUT_DB9_PIN7_Pin, 1); //3 high
 80003ee:	2201      	movs	r2, #1
 80003f0:	2108      	movs	r1, #8
 80003f2:	4830      	ldr	r0, [pc, #192]	; (80004b4 <main+0x258>)
 80003f4:	f000 fd21 	bl	8000e3a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(OUT_DB9_PIN7_GPIO_Port, OUT_DB9_PIN7_Pin, 1); //3 high
 80003f8:	2201      	movs	r2, #1
 80003fa:	2108      	movs	r1, #8
 80003fc:	482d      	ldr	r0, [pc, #180]	; (80004b4 <main+0x258>)
 80003fe:	f000 fd1c 	bl	8000e3a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(OUT_DB9_PIN7_GPIO_Port, OUT_DB9_PIN7_Pin, 1); //3 high
 8000402:	2201      	movs	r2, #1
 8000404:	2108      	movs	r1, #8
 8000406:	482b      	ldr	r0, [pc, #172]	; (80004b4 <main+0x258>)
 8000408:	f000 fd17 	bl	8000e3a <HAL_GPIO_WritePin>

		  if ( !HAL_GPIO_ReadPin(IN_DB9_PIN1_GPIO_Port, IN_DB9_PIN1_Pin) ){ //Z
 800040c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000410:	4828      	ldr	r0, [pc, #160]	; (80004b4 <main+0x258>)
 8000412:	f000 fcfb 	bl	8000e0c <HAL_GPIO_ReadPin>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d106      	bne.n	800042a <main+0x1ce>
			  reporteUsb.botones |= 0b1000000;
 800041c:	4b28      	ldr	r3, [pc, #160]	; (80004c0 <main+0x264>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000424:	b2da      	uxtb	r2, r3
 8000426:	4b26      	ldr	r3, [pc, #152]	; (80004c0 <main+0x264>)
 8000428:	701a      	strb	r2, [r3, #0]
		  }
		  if ( !HAL_GPIO_ReadPin(IN_DB9_PIN2_GPIO_Port, IN_DB9_PIN2_Pin) ){ //Y
 800042a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800042e:	4821      	ldr	r0, [pc, #132]	; (80004b4 <main+0x258>)
 8000430:	f000 fcec 	bl	8000e0c <HAL_GPIO_ReadPin>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d106      	bne.n	8000448 <main+0x1ec>
			  reporteUsb.botones |= 0b100000;
 800043a:	4b21      	ldr	r3, [pc, #132]	; (80004c0 <main+0x264>)
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	f043 0320 	orr.w	r3, r3, #32
 8000442:	b2da      	uxtb	r2, r3
 8000444:	4b1e      	ldr	r3, [pc, #120]	; (80004c0 <main+0x264>)
 8000446:	701a      	strb	r2, [r3, #0]
		  }
		  if ( !HAL_GPIO_ReadPin(IN_DB9_PIN3_GPIO_Port, IN_DB9_PIN3_Pin) ){ //X
 8000448:	2102      	movs	r1, #2
 800044a:	481a      	ldr	r0, [pc, #104]	; (80004b4 <main+0x258>)
 800044c:	f000 fcde 	bl	8000e0c <HAL_GPIO_ReadPin>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d106      	bne.n	8000464 <main+0x208>
			  reporteUsb.botones |= 0b10000;
 8000456:	4b1a      	ldr	r3, [pc, #104]	; (80004c0 <main+0x264>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	f043 0310 	orr.w	r3, r3, #16
 800045e:	b2da      	uxtb	r2, r3
 8000460:	4b17      	ldr	r3, [pc, #92]	; (80004c0 <main+0x264>)
 8000462:	701a      	strb	r2, [r3, #0]
		  }
		  if ( !HAL_GPIO_ReadPin(IN_DB9_PIN4_GPIO_Port, IN_DB9_PIN4_Pin) ){ //mode
 8000464:	2101      	movs	r1, #1
 8000466:	4813      	ldr	r0, [pc, #76]	; (80004b4 <main+0x258>)
 8000468:	f000 fcd0 	bl	8000e0c <HAL_GPIO_ReadPin>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d106      	bne.n	8000480 <main+0x224>
			  reporteUsb.botones |= 0b10000000;
 8000472:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <main+0x264>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800047a:	b2da      	uxtb	r2, r3
 800047c:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <main+0x264>)
 800047e:	701a      	strb	r2, [r3, #0]
		  }

		  HAL_GPIO_WritePin(OUT_DB9_PIN7_GPIO_Port, OUT_DB9_PIN7_Pin, 0); //4 low
 8000480:	2200      	movs	r2, #0
 8000482:	2108      	movs	r1, #8
 8000484:	480b      	ldr	r0, [pc, #44]	; (80004b4 <main+0x258>)
 8000486:	f000 fcd8 	bl	8000e3a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(OUT_DB9_PIN7_GPIO_Port, OUT_DB9_PIN7_Pin, 1); //4 high
 800048a:	2201      	movs	r2, #1
 800048c:	2108      	movs	r1, #8
 800048e:	4809      	ldr	r0, [pc, #36]	; (80004b4 <main+0x258>)
 8000490:	f000 fcd3 	bl	8000e3a <HAL_GPIO_WritePin>

		  if (joystickTipe != 0){
 8000494:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <main+0x268>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d004      	beq.n	80004a6 <main+0x24a>
			  USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&reporteUsb, 3);
 800049c:	2203      	movs	r2, #3
 800049e:	4908      	ldr	r1, [pc, #32]	; (80004c0 <main+0x264>)
 80004a0:	480a      	ldr	r0, [pc, #40]	; (80004cc <main+0x270>)
 80004a2:	f003 fe7d 	bl	80041a0 <USBD_HID_SendReport>
		  }

		  flag_tim3 = 0;
 80004a6:	4b05      	ldr	r3, [pc, #20]	; (80004bc <main+0x260>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	701a      	strb	r2, [r3, #0]
	  if (flag_tim3 != 0){
 80004ac:	e6f0      	b.n	8000290 <main+0x34>
 80004ae:	bf00      	nop
 80004b0:	40011000 	.word	0x40011000
 80004b4:	40010c00 	.word	0x40010c00
 80004b8:	20000188 	.word	0x20000188
 80004bc:	20000183 	.word	0x20000183
 80004c0:	20000180 	.word	0x20000180
 80004c4:	20000184 	.word	0x20000184
 80004c8:	40010800 	.word	0x40010800
 80004cc:	200001d0 	.word	0x200001d0

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b094      	sub	sp, #80	; 0x50
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004da:	2228      	movs	r2, #40	; 0x28
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f005 fb1e 	bl	8005b20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e4:	f107 0314 	add.w	r3, r7, #20
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]
 80004f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000500:	2301      	movs	r3, #1
 8000502:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000504:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000508:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050e:	2301      	movs	r3, #1
 8000510:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000512:	2302      	movs	r3, #2
 8000514:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000516:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800051a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800051c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000520:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000522:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000526:	4618      	mov	r0, r3
 8000528:	f001 fb6e 	bl	8001c08 <HAL_RCC_OscConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000532:	f000 f835 	bl	80005a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000536:	230f      	movs	r3, #15
 8000538:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053a:	2302      	movs	r3, #2
 800053c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000546:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000548:	2300      	movs	r3, #0
 800054a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800054c:	f107 0314 	add.w	r3, r7, #20
 8000550:	2102      	movs	r1, #2
 8000552:	4618      	mov	r0, r3
 8000554:	f001 fdda 	bl	800210c <HAL_RCC_ClockConfig>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800055e:	f000 f81f 	bl	80005a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000562:	2310      	movs	r3, #16
 8000564:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000566:	2300      	movs	r3, #0
 8000568:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	4618      	mov	r0, r3
 800056e:	f001 ff33 	bl	80023d8 <HAL_RCCEx_PeriphCLKConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000578:	f000 f812 	bl	80005a0 <Error_Handler>
  }
}
 800057c:	bf00      	nop
 800057e:	3750      	adds	r7, #80	; 0x50
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	flag_tim3 = 1;
 800058c:	4b03      	ldr	r3, [pc, #12]	; (800059c <HAL_TIM_PeriodElapsedCallback+0x18>)
 800058e:	2201      	movs	r2, #1
 8000590:	701a      	strb	r2, [r3, #0]
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	20000183 	.word	0x20000183

080005a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a4:	b672      	cpsid	i
}
 80005a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <Error_Handler+0x8>
	...

080005ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005b2:	4b15      	ldr	r3, [pc, #84]	; (8000608 <HAL_MspInit+0x5c>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	4a14      	ldr	r2, [pc, #80]	; (8000608 <HAL_MspInit+0x5c>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6193      	str	r3, [r2, #24]
 80005be:	4b12      	ldr	r3, [pc, #72]	; (8000608 <HAL_MspInit+0x5c>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ca:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <HAL_MspInit+0x5c>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <HAL_MspInit+0x5c>)
 80005d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d4:	61d3      	str	r3, [r2, #28]
 80005d6:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <HAL_MspInit+0x5c>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <HAL_MspInit+0x60>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	4a04      	ldr	r2, [pc, #16]	; (800060c <HAL_MspInit+0x60>)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr
 8000608:	40021000 	.word	0x40021000
 800060c:	40010000 	.word	0x40010000

08000610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <NMI_Handler+0x4>

08000616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800061a:	e7fe      	b.n	800061a <HardFault_Handler+0x4>

0800061c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <MemManage_Handler+0x4>

08000622 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000626:	e7fe      	b.n	8000626 <BusFault_Handler+0x4>

08000628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800062c:	e7fe      	b.n	800062c <UsageFault_Handler+0x4>

0800062e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr

0800063a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr

08000646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr

08000652 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000656:	f000 f92b 	bl	80008b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000664:	4802      	ldr	r0, [pc, #8]	; (8000670 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000666:	f000 fd07 	bl	8001078 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000694 	.word	0x20000694

08000674 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000678:	4802      	ldr	r0, [pc, #8]	; (8000684 <TIM3_IRQHandler+0x10>)
 800067a:	f001 ffb1 	bl	80025e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000188 	.word	0x20000188

08000688 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800068c:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <SystemInit+0x5c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a14      	ldr	r2, [pc, #80]	; (80006e4 <SystemInit+0x5c>)
 8000692:	f043 0301 	orr.w	r3, r3, #1
 8000696:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <SystemInit+0x5c>)
 800069a:	685a      	ldr	r2, [r3, #4]
 800069c:	4911      	ldr	r1, [pc, #68]	; (80006e4 <SystemInit+0x5c>)
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <SystemInit+0x60>)
 80006a0:	4013      	ands	r3, r2
 80006a2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <SystemInit+0x5c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a0e      	ldr	r2, [pc, #56]	; (80006e4 <SystemInit+0x5c>)
 80006aa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006b2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006b4:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <SystemInit+0x5c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <SystemInit+0x5c>)
 80006ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006be:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <SystemInit+0x5c>)
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	4a07      	ldr	r2, [pc, #28]	; (80006e4 <SystemInit+0x5c>)
 80006c6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80006ca:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <SystemInit+0x5c>)
 80006ce:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80006d2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <SystemInit+0x64>)
 80006d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006da:	609a      	str	r2, [r3, #8]
#endif 
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	40021000 	.word	0x40021000
 80006e8:	f8ff0000 	.word	0xf8ff0000
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f6:	f107 0308 	add.w	r3, r7, #8
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000704:	463b      	mov	r3, r7
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_TIM3_Init+0x94>)
 800070e:	4a1e      	ldr	r2, [pc, #120]	; (8000788 <MX_TIM3_Init+0x98>)
 8000710:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1440-1;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_TIM3_Init+0x94>)
 8000714:	f240 529f 	movw	r2, #1439	; 0x59f
 8000718:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_TIM3_Init+0x94>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_TIM3_Init+0x94>)
 8000722:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000726:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_TIM3_Init+0x94>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_TIM3_Init+0x94>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000734:	4813      	ldr	r0, [pc, #76]	; (8000784 <MX_TIM3_Init+0x94>)
 8000736:	f001 ff05 	bl	8002544 <HAL_TIM_Base_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000740:	f7ff ff2e 	bl	80005a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000748:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800074a:	f107 0308 	add.w	r3, r7, #8
 800074e:	4619      	mov	r1, r3
 8000750:	480c      	ldr	r0, [pc, #48]	; (8000784 <MX_TIM3_Init+0x94>)
 8000752:	f002 f84d 	bl	80027f0 <HAL_TIM_ConfigClockSource>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800075c:	f7ff ff20 	bl	80005a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000760:	2300      	movs	r3, #0
 8000762:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000768:	463b      	mov	r3, r7
 800076a:	4619      	mov	r1, r3
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_TIM3_Init+0x94>)
 800076e:	f002 fa1f 	bl	8002bb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000778:	f7ff ff12 	bl	80005a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	3718      	adds	r7, #24
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000188 	.word	0x20000188
 8000788:	40000400 	.word	0x40000400

0800078c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a0d      	ldr	r2, [pc, #52]	; (80007d0 <HAL_TIM_Base_MspInit+0x44>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d113      	bne.n	80007c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <HAL_TIM_Base_MspInit+0x48>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	4a0c      	ldr	r2, [pc, #48]	; (80007d4 <HAL_TIM_Base_MspInit+0x48>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	61d3      	str	r3, [r2, #28]
 80007aa:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <HAL_TIM_Base_MspInit+0x48>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	201d      	movs	r0, #29
 80007bc:	f000 f96b 	bl	8000a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80007c0:	201d      	movs	r0, #29
 80007c2:	f000 f984 	bl	8000ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40000400 	.word	0x40000400
 80007d4:	40021000 	.word	0x40021000

080007d8 <Reset_Handler>:
 80007d8:	2100      	movs	r1, #0
 80007da:	e003      	b.n	80007e4 <LoopCopyDataInit>

080007dc <CopyDataInit>:
 80007dc:	4b0b      	ldr	r3, [pc, #44]	; (800080c <LoopFillZerobss+0x14>)
 80007de:	585b      	ldr	r3, [r3, r1]
 80007e0:	5043      	str	r3, [r0, r1]
 80007e2:	3104      	adds	r1, #4

080007e4 <LoopCopyDataInit>:
 80007e4:	480a      	ldr	r0, [pc, #40]	; (8000810 <LoopFillZerobss+0x18>)
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <LoopFillZerobss+0x1c>)
 80007e8:	1842      	adds	r2, r0, r1
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d3f6      	bcc.n	80007dc <CopyDataInit>
 80007ee:	4a0a      	ldr	r2, [pc, #40]	; (8000818 <LoopFillZerobss+0x20>)
 80007f0:	e002      	b.n	80007f8 <LoopFillZerobss>

080007f2 <FillZerobss>:
 80007f2:	2300      	movs	r3, #0
 80007f4:	f842 3b04 	str.w	r3, [r2], #4

080007f8 <LoopFillZerobss>:
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <LoopFillZerobss+0x24>)
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d3f9      	bcc.n	80007f2 <FillZerobss>
 80007fe:	f7ff ff43 	bl	8000688 <SystemInit>
 8000802:	f005 f969 	bl	8005ad8 <__libc_init_array>
 8000806:	f7ff fd29 	bl	800025c <main>
 800080a:	4770      	bx	lr
 800080c:	08005bb8 	.word	0x08005bb8
 8000810:	20000000 	.word	0x20000000
 8000814:	20000164 	.word	0x20000164
 8000818:	20000164 	.word	0x20000164
 800081c:	20000914 	.word	0x20000914

08000820 <ADC1_2_IRQHandler>:
 8000820:	e7fe      	b.n	8000820 <ADC1_2_IRQHandler>
	...

08000824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <HAL_Init+0x28>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a07      	ldr	r2, [pc, #28]	; (800084c <HAL_Init+0x28>)
 800082e:	f043 0310 	orr.w	r3, r3, #16
 8000832:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000834:	2003      	movs	r0, #3
 8000836:	f000 f923 	bl	8000a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800083a:	200f      	movs	r0, #15
 800083c:	f000 f808 	bl	8000850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000840:	f7ff feb4 	bl	80005ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40022000 	.word	0x40022000

08000850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <HAL_InitTick+0x54>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <HAL_InitTick+0x58>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	4619      	mov	r1, r3
 8000862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000866:	fbb3 f3f1 	udiv	r3, r3, r1
 800086a:	fbb2 f3f3 	udiv	r3, r2, r3
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f93b 	bl	8000aea <HAL_SYSTICK_Config>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	e00e      	b.n	800089c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2b0f      	cmp	r3, #15
 8000882:	d80a      	bhi.n	800089a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000884:	2200      	movs	r2, #0
 8000886:	6879      	ldr	r1, [r7, #4]
 8000888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800088c:	f000 f903 	bl	8000a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000890:	4a06      	ldr	r2, [pc, #24]	; (80008ac <HAL_InitTick+0x5c>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000896:	2300      	movs	r3, #0
 8000898:	e000      	b.n	800089c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
}
 800089c:	4618      	mov	r0, r3
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000000 	.word	0x20000000
 80008a8:	20000008 	.word	0x20000008
 80008ac:	20000004 	.word	0x20000004

080008b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <HAL_IncTick+0x1c>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <HAL_IncTick+0x20>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4413      	add	r3, r2
 80008c0:	4a03      	ldr	r2, [pc, #12]	; (80008d0 <HAL_IncTick+0x20>)
 80008c2:	6013      	str	r3, [r2, #0]
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr
 80008cc:	20000008 	.word	0x20000008
 80008d0:	200001c8 	.word	0x200001c8

080008d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  return uwTick;
 80008d8:	4b02      	ldr	r3, [pc, #8]	; (80008e4 <HAL_GetTick+0x10>)
 80008da:	681b      	ldr	r3, [r3, #0]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr
 80008e4:	200001c8 	.word	0x200001c8

080008e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f003 0307 	and.w	r3, r3, #7
 80008f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <__NVIC_SetPriorityGrouping+0x44>)
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008fe:	68ba      	ldr	r2, [r7, #8]
 8000900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000904:	4013      	ands	r3, r2
 8000906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800091a:	4a04      	ldr	r2, [pc, #16]	; (800092c <__NVIC_SetPriorityGrouping+0x44>)
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	60d3      	str	r3, [r2, #12]
}
 8000920:	bf00      	nop
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000934:	4b04      	ldr	r3, [pc, #16]	; (8000948 <__NVIC_GetPriorityGrouping+0x18>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	0a1b      	lsrs	r3, r3, #8
 800093a:	f003 0307 	and.w	r3, r3, #7
}
 800093e:	4618      	mov	r0, r3
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	2b00      	cmp	r3, #0
 800095c:	db0b      	blt.n	8000976 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	f003 021f 	and.w	r2, r3, #31
 8000964:	4906      	ldr	r1, [pc, #24]	; (8000980 <__NVIC_EnableIRQ+0x34>)
 8000966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096a:	095b      	lsrs	r3, r3, #5
 800096c:	2001      	movs	r0, #1
 800096e:	fa00 f202 	lsl.w	r2, r0, r2
 8000972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr
 8000980:	e000e100 	.word	0xe000e100

08000984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	6039      	str	r1, [r7, #0]
 800098e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000994:	2b00      	cmp	r3, #0
 8000996:	db0a      	blt.n	80009ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	b2da      	uxtb	r2, r3
 800099c:	490c      	ldr	r1, [pc, #48]	; (80009d0 <__NVIC_SetPriority+0x4c>)
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	0112      	lsls	r2, r2, #4
 80009a4:	b2d2      	uxtb	r2, r2
 80009a6:	440b      	add	r3, r1
 80009a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009ac:	e00a      	b.n	80009c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4908      	ldr	r1, [pc, #32]	; (80009d4 <__NVIC_SetPriority+0x50>)
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	f003 030f 	and.w	r3, r3, #15
 80009ba:	3b04      	subs	r3, #4
 80009bc:	0112      	lsls	r2, r2, #4
 80009be:	b2d2      	uxtb	r2, r2
 80009c0:	440b      	add	r3, r1
 80009c2:	761a      	strb	r2, [r3, #24]
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000e100 	.word	0xe000e100
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d8:	b480      	push	{r7}
 80009da:	b089      	sub	sp, #36	; 0x24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	f1c3 0307 	rsb	r3, r3, #7
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	bf28      	it	cs
 80009f6:	2304      	movcs	r3, #4
 80009f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	3304      	adds	r3, #4
 80009fe:	2b06      	cmp	r3, #6
 8000a00:	d902      	bls.n	8000a08 <NVIC_EncodePriority+0x30>
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3b03      	subs	r3, #3
 8000a06:	e000      	b.n	8000a0a <NVIC_EncodePriority+0x32>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43da      	mvns	r2, r3
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	401a      	ands	r2, r3
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2a:	43d9      	mvns	r1, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a30:	4313      	orrs	r3, r2
         );
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3724      	adds	r7, #36	; 0x24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a4c:	d301      	bcc.n	8000a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e00f      	b.n	8000a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a52:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <SysTick_Config+0x40>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a5a:	210f      	movs	r1, #15
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a60:	f7ff ff90 	bl	8000984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <SysTick_Config+0x40>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a6a:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <SysTick_Config+0x40>)
 8000a6c:	2207      	movs	r2, #7
 8000a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	e000e010 	.word	0xe000e010

08000a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff ff2d 	bl	80008e8 <__NVIC_SetPriorityGrouping>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b086      	sub	sp, #24
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
 8000aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aa8:	f7ff ff42 	bl	8000930 <__NVIC_GetPriorityGrouping>
 8000aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	68b9      	ldr	r1, [r7, #8]
 8000ab2:	6978      	ldr	r0, [r7, #20]
 8000ab4:	f7ff ff90 	bl	80009d8 <NVIC_EncodePriority>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000abe:	4611      	mov	r1, r2
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff5f 	bl	8000984 <__NVIC_SetPriority>
}
 8000ac6:	bf00      	nop
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff35 	bl	800094c <__NVIC_EnableIRQ>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff ffa2 	bl	8000a3c <SysTick_Config>
 8000af8:	4603      	mov	r3, r0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b08b      	sub	sp, #44	; 0x2c
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b16:	e169      	b.n	8000dec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	69fa      	ldr	r2, [r7, #28]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b2c:	69ba      	ldr	r2, [r7, #24]
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	f040 8158 	bne.w	8000de6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	4a9a      	ldr	r2, [pc, #616]	; (8000da4 <HAL_GPIO_Init+0x2a0>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d05e      	beq.n	8000bfe <HAL_GPIO_Init+0xfa>
 8000b40:	4a98      	ldr	r2, [pc, #608]	; (8000da4 <HAL_GPIO_Init+0x2a0>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d875      	bhi.n	8000c32 <HAL_GPIO_Init+0x12e>
 8000b46:	4a98      	ldr	r2, [pc, #608]	; (8000da8 <HAL_GPIO_Init+0x2a4>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d058      	beq.n	8000bfe <HAL_GPIO_Init+0xfa>
 8000b4c:	4a96      	ldr	r2, [pc, #600]	; (8000da8 <HAL_GPIO_Init+0x2a4>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d86f      	bhi.n	8000c32 <HAL_GPIO_Init+0x12e>
 8000b52:	4a96      	ldr	r2, [pc, #600]	; (8000dac <HAL_GPIO_Init+0x2a8>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d052      	beq.n	8000bfe <HAL_GPIO_Init+0xfa>
 8000b58:	4a94      	ldr	r2, [pc, #592]	; (8000dac <HAL_GPIO_Init+0x2a8>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d869      	bhi.n	8000c32 <HAL_GPIO_Init+0x12e>
 8000b5e:	4a94      	ldr	r2, [pc, #592]	; (8000db0 <HAL_GPIO_Init+0x2ac>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d04c      	beq.n	8000bfe <HAL_GPIO_Init+0xfa>
 8000b64:	4a92      	ldr	r2, [pc, #584]	; (8000db0 <HAL_GPIO_Init+0x2ac>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d863      	bhi.n	8000c32 <HAL_GPIO_Init+0x12e>
 8000b6a:	4a92      	ldr	r2, [pc, #584]	; (8000db4 <HAL_GPIO_Init+0x2b0>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d046      	beq.n	8000bfe <HAL_GPIO_Init+0xfa>
 8000b70:	4a90      	ldr	r2, [pc, #576]	; (8000db4 <HAL_GPIO_Init+0x2b0>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d85d      	bhi.n	8000c32 <HAL_GPIO_Init+0x12e>
 8000b76:	2b12      	cmp	r3, #18
 8000b78:	d82a      	bhi.n	8000bd0 <HAL_GPIO_Init+0xcc>
 8000b7a:	2b12      	cmp	r3, #18
 8000b7c:	d859      	bhi.n	8000c32 <HAL_GPIO_Init+0x12e>
 8000b7e:	a201      	add	r2, pc, #4	; (adr r2, 8000b84 <HAL_GPIO_Init+0x80>)
 8000b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b84:	08000bff 	.word	0x08000bff
 8000b88:	08000bd9 	.word	0x08000bd9
 8000b8c:	08000beb 	.word	0x08000beb
 8000b90:	08000c2d 	.word	0x08000c2d
 8000b94:	08000c33 	.word	0x08000c33
 8000b98:	08000c33 	.word	0x08000c33
 8000b9c:	08000c33 	.word	0x08000c33
 8000ba0:	08000c33 	.word	0x08000c33
 8000ba4:	08000c33 	.word	0x08000c33
 8000ba8:	08000c33 	.word	0x08000c33
 8000bac:	08000c33 	.word	0x08000c33
 8000bb0:	08000c33 	.word	0x08000c33
 8000bb4:	08000c33 	.word	0x08000c33
 8000bb8:	08000c33 	.word	0x08000c33
 8000bbc:	08000c33 	.word	0x08000c33
 8000bc0:	08000c33 	.word	0x08000c33
 8000bc4:	08000c33 	.word	0x08000c33
 8000bc8:	08000be1 	.word	0x08000be1
 8000bcc:	08000bf5 	.word	0x08000bf5
 8000bd0:	4a79      	ldr	r2, [pc, #484]	; (8000db8 <HAL_GPIO_Init+0x2b4>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d013      	beq.n	8000bfe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bd6:	e02c      	b.n	8000c32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	623b      	str	r3, [r7, #32]
          break;
 8000bde:	e029      	b.n	8000c34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	3304      	adds	r3, #4
 8000be6:	623b      	str	r3, [r7, #32]
          break;
 8000be8:	e024      	b.n	8000c34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	3308      	adds	r3, #8
 8000bf0:	623b      	str	r3, [r7, #32]
          break;
 8000bf2:	e01f      	b.n	8000c34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	330c      	adds	r3, #12
 8000bfa:	623b      	str	r3, [r7, #32]
          break;
 8000bfc:	e01a      	b.n	8000c34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d102      	bne.n	8000c0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c06:	2304      	movs	r3, #4
 8000c08:	623b      	str	r3, [r7, #32]
          break;
 8000c0a:	e013      	b.n	8000c34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d105      	bne.n	8000c20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c14:	2308      	movs	r3, #8
 8000c16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	69fa      	ldr	r2, [r7, #28]
 8000c1c:	611a      	str	r2, [r3, #16]
          break;
 8000c1e:	e009      	b.n	8000c34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c20:	2308      	movs	r3, #8
 8000c22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	69fa      	ldr	r2, [r7, #28]
 8000c28:	615a      	str	r2, [r3, #20]
          break;
 8000c2a:	e003      	b.n	8000c34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	623b      	str	r3, [r7, #32]
          break;
 8000c30:	e000      	b.n	8000c34 <HAL_GPIO_Init+0x130>
          break;
 8000c32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	2bff      	cmp	r3, #255	; 0xff
 8000c38:	d801      	bhi.n	8000c3e <HAL_GPIO_Init+0x13a>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	e001      	b.n	8000c42 <HAL_GPIO_Init+0x13e>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	3304      	adds	r3, #4
 8000c42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	2bff      	cmp	r3, #255	; 0xff
 8000c48:	d802      	bhi.n	8000c50 <HAL_GPIO_Init+0x14c>
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	e002      	b.n	8000c56 <HAL_GPIO_Init+0x152>
 8000c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c52:	3b08      	subs	r3, #8
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	210f      	movs	r1, #15
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	fa01 f303 	lsl.w	r3, r1, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	401a      	ands	r2, r3
 8000c68:	6a39      	ldr	r1, [r7, #32]
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c70:	431a      	orrs	r2, r3
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f000 80b1 	beq.w	8000de6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c84:	4b4d      	ldr	r3, [pc, #308]	; (8000dbc <HAL_GPIO_Init+0x2b8>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a4c      	ldr	r2, [pc, #304]	; (8000dbc <HAL_GPIO_Init+0x2b8>)
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	4b4a      	ldr	r3, [pc, #296]	; (8000dbc <HAL_GPIO_Init+0x2b8>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c9c:	4a48      	ldr	r2, [pc, #288]	; (8000dc0 <HAL_GPIO_Init+0x2bc>)
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca0:	089b      	lsrs	r3, r3, #2
 8000ca2:	3302      	adds	r3, #2
 8000ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	220f      	movs	r2, #15
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a40      	ldr	r2, [pc, #256]	; (8000dc4 <HAL_GPIO_Init+0x2c0>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d013      	beq.n	8000cf0 <HAL_GPIO_Init+0x1ec>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a3f      	ldr	r2, [pc, #252]	; (8000dc8 <HAL_GPIO_Init+0x2c4>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d00d      	beq.n	8000cec <HAL_GPIO_Init+0x1e8>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a3e      	ldr	r2, [pc, #248]	; (8000dcc <HAL_GPIO_Init+0x2c8>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d007      	beq.n	8000ce8 <HAL_GPIO_Init+0x1e4>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a3d      	ldr	r2, [pc, #244]	; (8000dd0 <HAL_GPIO_Init+0x2cc>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d101      	bne.n	8000ce4 <HAL_GPIO_Init+0x1e0>
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	e006      	b.n	8000cf2 <HAL_GPIO_Init+0x1ee>
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	e004      	b.n	8000cf2 <HAL_GPIO_Init+0x1ee>
 8000ce8:	2302      	movs	r3, #2
 8000cea:	e002      	b.n	8000cf2 <HAL_GPIO_Init+0x1ee>
 8000cec:	2301      	movs	r3, #1
 8000cee:	e000      	b.n	8000cf2 <HAL_GPIO_Init+0x1ee>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cf4:	f002 0203 	and.w	r2, r2, #3
 8000cf8:	0092      	lsls	r2, r2, #2
 8000cfa:	4093      	lsls	r3, r2
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d02:	492f      	ldr	r1, [pc, #188]	; (8000dc0 <HAL_GPIO_Init+0x2bc>)
 8000d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d06:	089b      	lsrs	r3, r3, #2
 8000d08:	3302      	adds	r3, #2
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d006      	beq.n	8000d2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d1c:	4b2d      	ldr	r3, [pc, #180]	; (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	492c      	ldr	r1, [pc, #176]	; (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	600b      	str	r3, [r1, #0]
 8000d28:	e006      	b.n	8000d38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	; (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	43db      	mvns	r3, r3
 8000d32:	4928      	ldr	r1, [pc, #160]	; (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d34:	4013      	ands	r3, r2
 8000d36:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d006      	beq.n	8000d52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d44:	4b23      	ldr	r3, [pc, #140]	; (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d46:	685a      	ldr	r2, [r3, #4]
 8000d48:	4922      	ldr	r1, [pc, #136]	; (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	604b      	str	r3, [r1, #4]
 8000d50:	e006      	b.n	8000d60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d52:	4b20      	ldr	r3, [pc, #128]	; (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	491e      	ldr	r1, [pc, #120]	; (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d006      	beq.n	8000d7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	4918      	ldr	r1, [pc, #96]	; (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	608b      	str	r3, [r1, #8]
 8000d78:	e006      	b.n	8000d88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d7a:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d7c:	689a      	ldr	r2, [r3, #8]
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	43db      	mvns	r3, r3
 8000d82:	4914      	ldr	r1, [pc, #80]	; (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d84:	4013      	ands	r3, r2
 8000d86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d021      	beq.n	8000dd8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d96:	68da      	ldr	r2, [r3, #12]
 8000d98:	490e      	ldr	r1, [pc, #56]	; (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	60cb      	str	r3, [r1, #12]
 8000da0:	e021      	b.n	8000de6 <HAL_GPIO_Init+0x2e2>
 8000da2:	bf00      	nop
 8000da4:	10320000 	.word	0x10320000
 8000da8:	10310000 	.word	0x10310000
 8000dac:	10220000 	.word	0x10220000
 8000db0:	10210000 	.word	0x10210000
 8000db4:	10120000 	.word	0x10120000
 8000db8:	10110000 	.word	0x10110000
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	40010000 	.word	0x40010000
 8000dc4:	40010800 	.word	0x40010800
 8000dc8:	40010c00 	.word	0x40010c00
 8000dcc:	40011000 	.word	0x40011000
 8000dd0:	40011400 	.word	0x40011400
 8000dd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <HAL_GPIO_Init+0x304>)
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	43db      	mvns	r3, r3
 8000de0:	4909      	ldr	r1, [pc, #36]	; (8000e08 <HAL_GPIO_Init+0x304>)
 8000de2:	4013      	ands	r3, r2
 8000de4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de8:	3301      	adds	r3, #1
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df2:	fa22 f303 	lsr.w	r3, r2, r3
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f47f ae8e 	bne.w	8000b18 <HAL_GPIO_Init+0x14>
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	372c      	adds	r7, #44	; 0x2c
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	40010400 	.word	0x40010400

08000e0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	887b      	ldrh	r3, [r7, #2]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d002      	beq.n	8000e2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e24:	2301      	movs	r3, #1
 8000e26:	73fb      	strb	r3, [r7, #15]
 8000e28:	e001      	b.n	8000e2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr

08000e3a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	460b      	mov	r3, r1
 8000e44:	807b      	strh	r3, [r7, #2]
 8000e46:	4613      	mov	r3, r2
 8000e48:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e4a:	787b      	ldrb	r3, [r7, #1]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d003      	beq.n	8000e58 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e50:	887a      	ldrh	r2, [r7, #2]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e56:	e003      	b.n	8000e60 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e58:	887b      	ldrh	r3, [r7, #2]
 8000e5a:	041a      	lsls	r2, r3, #16
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	611a      	str	r2, [r3, #16]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr

08000e6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e6c:	b08b      	sub	sp, #44	; 0x2c
 8000e6e:	af06      	add	r7, sp, #24
 8000e70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d101      	bne.n	8000e7c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e0d3      	b.n	8001024 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d106      	bne.n	8000e96 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f004 fba9 	bl	80055e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2203      	movs	r2, #3
 8000e9a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f001 ff01 	bl	8002caa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	603b      	str	r3, [r7, #0]
 8000eae:	687e      	ldr	r6, [r7, #4]
 8000eb0:	466d      	mov	r5, sp
 8000eb2:	f106 0410 	add.w	r4, r6, #16
 8000eb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eba:	6823      	ldr	r3, [r4, #0]
 8000ebc:	602b      	str	r3, [r5, #0]
 8000ebe:	1d33      	adds	r3, r6, #4
 8000ec0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ec2:	6838      	ldr	r0, [r7, #0]
 8000ec4:	f001 feca 	bl	8002c5c <USB_CoreInit>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d005      	beq.n	8000eda <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e0a4      	b.n	8001024 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f001 fefe 	bl	8002ce2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	73fb      	strb	r3, [r7, #15]
 8000eea:	e035      	b.n	8000f58 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	015b      	lsls	r3, r3, #5
 8000ef2:	4413      	add	r3, r2
 8000ef4:	3329      	adds	r3, #41	; 0x29
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	015b      	lsls	r3, r3, #5
 8000f00:	4413      	add	r3, r2
 8000f02:	3328      	adds	r3, #40	; 0x28
 8000f04:	7bfa      	ldrb	r2, [r7, #15]
 8000f06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	7bfa      	ldrb	r2, [r7, #15]
 8000f0c:	b291      	uxth	r1, r2
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	015b      	lsls	r3, r3, #5
 8000f12:	4413      	add	r3, r2
 8000f14:	3336      	adds	r3, #54	; 0x36
 8000f16:	460a      	mov	r2, r1
 8000f18:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	015b      	lsls	r3, r3, #5
 8000f20:	4413      	add	r3, r2
 8000f22:	332b      	adds	r3, #43	; 0x2b
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	015b      	lsls	r3, r3, #5
 8000f2e:	4413      	add	r3, r2
 8000f30:	3338      	adds	r3, #56	; 0x38
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	015b      	lsls	r3, r3, #5
 8000f3c:	4413      	add	r3, r2
 8000f3e:	333c      	adds	r3, #60	; 0x3c
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	3302      	adds	r3, #2
 8000f4a:	015b      	lsls	r3, r3, #5
 8000f4c:	4413      	add	r3, r2
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	3301      	adds	r3, #1
 8000f56:	73fb      	strb	r3, [r7, #15]
 8000f58:	7bfa      	ldrb	r2, [r7, #15]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d3c4      	bcc.n	8000eec <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	73fb      	strb	r3, [r7, #15]
 8000f66:	e031      	b.n	8000fcc <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	015b      	lsls	r3, r3, #5
 8000f6e:	4413      	add	r3, r2
 8000f70:	f203 1329 	addw	r3, r3, #297	; 0x129
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	015b      	lsls	r3, r3, #5
 8000f7e:	4413      	add	r3, r2
 8000f80:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000f84:	7bfa      	ldrb	r2, [r7, #15]
 8000f86:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	015b      	lsls	r3, r3, #5
 8000f8e:	4413      	add	r3, r2
 8000f90:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	015b      	lsls	r3, r3, #5
 8000f9e:	4413      	add	r3, r2
 8000fa0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	015b      	lsls	r3, r3, #5
 8000fae:	4413      	add	r3, r2
 8000fb0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	330a      	adds	r3, #10
 8000fbe:	015b      	lsls	r3, r3, #5
 8000fc0:	4413      	add	r3, r2
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	73fb      	strb	r3, [r7, #15]
 8000fcc:	7bfa      	ldrb	r2, [r7, #15]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d3c8      	bcc.n	8000f68 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	687e      	ldr	r6, [r7, #4]
 8000fde:	466d      	mov	r5, sp
 8000fe0:	f106 0410 	add.w	r4, r6, #16
 8000fe4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fe6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fe8:	6823      	ldr	r3, [r4, #0]
 8000fea:	602b      	str	r3, [r5, #0]
 8000fec:	1d33      	adds	r3, r6, #4
 8000fee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ff0:	6838      	ldr	r0, [r7, #0]
 8000ff2:	f001 fe82 	bl	8002cfa <USB_DevInit>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d005      	beq.n	8001008 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2202      	movs	r2, #2
 8001000:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e00d      	b.n	8001024 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2201      	movs	r2, #1
 8001014:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f002 fec0 	bl	8003da2 <USB_DevDisconnect>

  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800102c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800103a:	2b01      	cmp	r3, #1
 800103c:	d101      	bne.n	8001042 <HAL_PCD_Start+0x16>
 800103e:	2302      	movs	r3, #2
 8001040:	e016      	b.n	8001070 <HAL_PCD_Start+0x44>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2201      	movs	r2, #1
 8001046:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800104a:	2101      	movs	r1, #1
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f004 fd0c 	bl	8005a6a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f002 fe99 	bl	8003d8e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f001 fe0b 	bl	8002c7c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f002 fe96 	bl	8003db6 <USB_ReadInterrupts>
 800108a:	4603      	mov	r3, r0
 800108c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001094:	d102      	bne.n	800109c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 fade 	bl	8001658 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f002 fe88 	bl	8003db6 <USB_ReadInterrupts>
 80010a6:	4603      	mov	r3, r0
 80010a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010b0:	d112      	bne.n	80010d8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010c4:	b292      	uxth	r2, r2
 80010c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f004 fb01 	bl	80056d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80010d0:	2100      	movs	r1, #0
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f000 f8de 	bl	8001294 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f002 fe6a 	bl	8003db6 <USB_ReadInterrupts>
 80010e2:	4603      	mov	r3, r0
 80010e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010ec:	d10b      	bne.n	8001106 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001100:	b292      	uxth	r2, r2
 8001102:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f002 fe53 	bl	8003db6 <USB_ReadInterrupts>
 8001110:	4603      	mov	r3, r0
 8001112:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800111a:	d10b      	bne.n	8001134 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001124:	b29a      	uxth	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800112e:	b292      	uxth	r2, r2
 8001130:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f002 fe3c 	bl	8003db6 <USB_ReadInterrupts>
 800113e:	4603      	mov	r3, r0
 8001140:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001148:	d126      	bne.n	8001198 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001152:	b29a      	uxth	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 0204 	bic.w	r2, r2, #4
 800115c:	b292      	uxth	r2, r2
 800115e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800116a:	b29a      	uxth	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 0208 	bic.w	r2, r2, #8
 8001174:	b292      	uxth	r2, r2
 8001176:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f004 fae2 	bl	8005744 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001188:	b29a      	uxth	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001192:	b292      	uxth	r2, r2
 8001194:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f002 fe0a 	bl	8003db6 <USB_ReadInterrupts>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011ac:	d13d      	bne.n	800122a <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f042 0208 	orr.w	r2, r2, #8
 80011c0:	b292      	uxth	r2, r2
 80011c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011d8:	b292      	uxth	r2, r2
 80011da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f042 0204 	orr.w	r2, r2, #4
 80011f0:	b292      	uxth	r2, r2
 80011f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f002 fddb 	bl	8003db6 <USB_ReadInterrupts>
 8001200:	4603      	mov	r3, r0
 8001202:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800120a:	d10b      	bne.n	8001224 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001214:	b29a      	uxth	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800121e:	b292      	uxth	r2, r2
 8001220:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f004 fa73 	bl	8005710 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f002 fdc1 	bl	8003db6 <USB_ReadInterrupts>
 8001234:	4603      	mov	r3, r0
 8001236:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800123a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800123e:	d10e      	bne.n	800125e <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001248:	b29a      	uxth	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001252:	b292      	uxth	r2, r2
 8001254:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f004 fa2c 	bl	80056b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f002 fda7 	bl	8003db6 <USB_ReadInterrupts>
 8001268:	4603      	mov	r3, r0
 800126a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001272:	d10b      	bne.n	800128c <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800127c:	b29a      	uxth	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001286:	b292      	uxth	r2, r2
 8001288:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d101      	bne.n	80012ae <HAL_PCD_SetAddress+0x1a>
 80012aa:	2302      	movs	r3, #2
 80012ac:	e013      	b.n	80012d6 <HAL_PCD_SetAddress+0x42>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2201      	movs	r2, #1
 80012b2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	78fa      	ldrb	r2, [r7, #3]
 80012ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	78fa      	ldrb	r2, [r7, #3]
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f002 fd4e 	bl	8003d68 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b084      	sub	sp, #16
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	4608      	mov	r0, r1
 80012e8:	4611      	mov	r1, r2
 80012ea:	461a      	mov	r2, r3
 80012ec:	4603      	mov	r3, r0
 80012ee:	70fb      	strb	r3, [r7, #3]
 80012f0:	460b      	mov	r3, r1
 80012f2:	803b      	strh	r3, [r7, #0]
 80012f4:	4613      	mov	r3, r2
 80012f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80012fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001300:	2b00      	cmp	r3, #0
 8001302:	da0b      	bge.n	800131c <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	015b      	lsls	r3, r3, #5
 800130c:	3328      	adds	r3, #40	; 0x28
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2201      	movs	r2, #1
 8001318:	705a      	strb	r2, [r3, #1]
 800131a:	e00b      	b.n	8001334 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800131c:	78fb      	ldrb	r3, [r7, #3]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	015b      	lsls	r3, r3, #5
 8001324:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	4413      	add	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2200      	movs	r2, #0
 8001332:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001334:	78fb      	ldrb	r3, [r7, #3]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	b2da      	uxtb	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001340:	883a      	ldrh	r2, [r7, #0]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	78ba      	ldrb	r2, [r7, #2]
 800134a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	785b      	ldrb	r3, [r3, #1]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d004      	beq.n	800135e <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	b29a      	uxth	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800135e:	78bb      	ldrb	r3, [r7, #2]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d102      	bne.n	800136a <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2200      	movs	r2, #0
 8001368:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001370:	2b01      	cmp	r3, #1
 8001372:	d101      	bne.n	8001378 <HAL_PCD_EP_Open+0x9a>
 8001374:	2302      	movs	r3, #2
 8001376:	e00e      	b.n	8001396 <HAL_PCD_EP_Open+0xb8>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2201      	movs	r2, #1
 800137c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68f9      	ldr	r1, [r7, #12]
 8001386:	4618      	mov	r0, r3
 8001388:	f001 fcdc 	bl	8002d44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001394:	7afb      	ldrb	r3, [r7, #11]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b084      	sub	sp, #16
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	460b      	mov	r3, r1
 80013a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	da0b      	bge.n	80013ca <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	015b      	lsls	r3, r3, #5
 80013ba:	3328      	adds	r3, #40	; 0x28
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	4413      	add	r3, r2
 80013c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2201      	movs	r2, #1
 80013c6:	705a      	strb	r2, [r3, #1]
 80013c8:	e00b      	b.n	80013e2 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013ca:	78fb      	ldrb	r3, [r7, #3]
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	015b      	lsls	r3, r3, #5
 80013d2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2200      	movs	r2, #0
 80013e0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80013e2:	78fb      	ldrb	r3, [r7, #3]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d101      	bne.n	80013fc <HAL_PCD_EP_Close+0x5e>
 80013f8:	2302      	movs	r3, #2
 80013fa:	e00e      	b.n	800141a <HAL_PCD_EP_Close+0x7c>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68f9      	ldr	r1, [r7, #12]
 800140a:	4618      	mov	r0, r3
 800140c:	f001 ff88 	bl	8003320 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b086      	sub	sp, #24
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	460b      	mov	r3, r1
 8001430:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001432:	7afb      	ldrb	r3, [r7, #11]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	015b      	lsls	r3, r3, #5
 800143a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	4413      	add	r3, r2
 8001442:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	2200      	movs	r2, #0
 800145a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800145c:	7afb      	ldrb	r3, [r7, #11]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	b2da      	uxtb	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001468:	7afb      	ldrb	r3, [r7, #11]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	2b00      	cmp	r3, #0
 8001470:	d106      	bne.n	8001480 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6979      	ldr	r1, [r7, #20]
 8001478:	4618      	mov	r0, r3
 800147a:	f002 f8e7 	bl	800364c <USB_EPStartXfer>
 800147e:	e005      	b.n	800148c <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6979      	ldr	r1, [r7, #20]
 8001486:	4618      	mov	r0, r3
 8001488:	f002 f8e0 	bl	800364c <USB_EPStartXfer>
  }

  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b086      	sub	sp, #24
 800149a:	af00      	add	r7, sp, #0
 800149c:	60f8      	str	r0, [r7, #12]
 800149e:	607a      	str	r2, [r7, #4]
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	460b      	mov	r3, r1
 80014a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014a6:	7afb      	ldrb	r3, [r7, #11]
 80014a8:	f003 0307 	and.w	r3, r3, #7
 80014ac:	015b      	lsls	r3, r3, #5
 80014ae:	3328      	adds	r3, #40	; 0x28
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	4413      	add	r3, r2
 80014b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	2200      	movs	r2, #0
 80014c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	2201      	movs	r2, #1
 80014cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014ce:	7afb      	ldrb	r3, [r7, #11]
 80014d0:	f003 0307 	and.w	r3, r3, #7
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80014da:	7afb      	ldrb	r3, [r7, #11]
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d106      	bne.n	80014f2 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6979      	ldr	r1, [r7, #20]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f002 f8ae 	bl	800364c <USB_EPStartXfer>
 80014f0:	e005      	b.n	80014fe <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6979      	ldr	r1, [r7, #20]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f002 f8a7 	bl	800364c <USB_EPStartXfer>
  }

  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001514:	78fb      	ldrb	r3, [r7, #3]
 8001516:	f003 0207 	and.w	r2, r3, #7
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	429a      	cmp	r2, r3
 8001520:	d901      	bls.n	8001526 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e046      	b.n	80015b4 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001526:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800152a:	2b00      	cmp	r3, #0
 800152c:	da0b      	bge.n	8001546 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800152e:	78fb      	ldrb	r3, [r7, #3]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	015b      	lsls	r3, r3, #5
 8001536:	3328      	adds	r3, #40	; 0x28
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	4413      	add	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2201      	movs	r2, #1
 8001542:	705a      	strb	r2, [r3, #1]
 8001544:	e009      	b.n	800155a <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	015b      	lsls	r3, r3, #5
 800154a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2200      	movs	r2, #0
 8001558:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2201      	movs	r2, #1
 800155e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001560:	78fb      	ldrb	r3, [r7, #3]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	b2da      	uxtb	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001572:	2b01      	cmp	r3, #1
 8001574:	d101      	bne.n	800157a <HAL_PCD_EP_SetStall+0x72>
 8001576:	2302      	movs	r3, #2
 8001578:	e01c      	b.n	80015b4 <HAL_PCD_EP_SetStall+0xac>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68f9      	ldr	r1, [r7, #12]
 8001588:	4618      	mov	r0, r3
 800158a:	f002 fb17 	bl	8003bbc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	2b00      	cmp	r3, #0
 8001596:	d108      	bne.n	80015aa <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80015a2:	4619      	mov	r1, r3
 80015a4:	4610      	mov	r0, r2
 80015a6:	f002 fc15 	bl	8003dd4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	f003 020f 	and.w	r2, r3, #15
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d901      	bls.n	80015da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e03a      	b.n	8001650 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	da0b      	bge.n	80015fa <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015e2:	78fb      	ldrb	r3, [r7, #3]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	015b      	lsls	r3, r3, #5
 80015ea:	3328      	adds	r3, #40	; 0x28
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2201      	movs	r2, #1
 80015f6:	705a      	strb	r2, [r3, #1]
 80015f8:	e00b      	b.n	8001612 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015fa:	78fb      	ldrb	r3, [r7, #3]
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	015b      	lsls	r3, r3, #5
 8001602:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001618:	78fb      	ldrb	r3, [r7, #3]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	b2da      	uxtb	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800162a:	2b01      	cmp	r3, #1
 800162c:	d101      	bne.n	8001632 <HAL_PCD_EP_ClrStall+0x76>
 800162e:	2302      	movs	r3, #2
 8001630:	e00e      	b.n	8001650 <HAL_PCD_EP_ClrStall+0x94>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68f9      	ldr	r1, [r7, #12]
 8001640:	4618      	mov	r0, r3
 8001642:	f002 fafd 	bl	8003c40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b089      	sub	sp, #36	; 0x24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001660:	e287      	b.n	8001b72 <PCD_EP_ISR_Handler+0x51a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800166a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800166c:	8afb      	ldrh	r3, [r7, #22]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001676:	7d7b      	ldrb	r3, [r7, #21]
 8001678:	2b00      	cmp	r3, #0
 800167a:	f040 8142 	bne.w	8001902 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800167e:	8afb      	ldrh	r3, [r7, #22]
 8001680:	f003 0310 	and.w	r3, r3, #16
 8001684:	2b00      	cmp	r3, #0
 8001686:	d151      	bne.n	800172c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	b29b      	uxth	r3, r3
 8001690:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001698:	b29c      	uxth	r4, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80016a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3328      	adds	r3, #40	; 0x28
 80016ae:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	461a      	mov	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4413      	add	r3, r2
 80016c4:	3302      	adds	r3, #2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6812      	ldr	r2, [r2, #0]
 80016cc:	4413      	add	r3, r2
 80016ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	695a      	ldr	r2, [r3, #20]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	441a      	add	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80016ea:	2100      	movs	r1, #0
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f003 ffcb 	bl	8005688 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 8239 	beq.w	8001b72 <PCD_EP_ISR_Handler+0x51a>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	2b00      	cmp	r3, #0
 8001706:	f040 8234 	bne.w	8001b72 <PCD_EP_ISR_Handler+0x51a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001710:	b2db      	uxtb	r3, r3
 8001712:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001716:	b2da      	uxtb	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	b292      	uxth	r2, r2
 800171e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800172a:	e222      	b.n	8001b72 <PCD_EP_ISR_Handler+0x51a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001732:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800173c:	8a7b      	ldrh	r3, [r7, #18]
 800173e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001742:	2b00      	cmp	r3, #0
 8001744:	d033      	beq.n	80017ae <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800174e:	b29b      	uxth	r3, r3
 8001750:	461a      	mov	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	4413      	add	r3, r2
 800175a:	3306      	adds	r3, #6
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	4413      	add	r3, r2
 8001764:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001784:	b29b      	uxth	r3, r3
 8001786:	f002 fb75 	bl	8003e74 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	b29a      	uxth	r2, r3
 8001792:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001796:	4013      	ands	r3, r2
 8001798:	b29c      	uxth	r4, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80017a2:	b292      	uxth	r2, r2
 80017a4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f003 ff44 	bl	8005634 <HAL_PCD_SetupStageCallback>
 80017ac:	e1e1      	b.n	8001b72 <PCD_EP_ISR_Handler+0x51a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80017ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f280 81dd 	bge.w	8001b72 <PCD_EP_ISR_Handler+0x51a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	b29a      	uxth	r2, r3
 80017c0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80017c4:	4013      	ands	r3, r2
 80017c6:	b29c      	uxth	r4, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80017d0:	b292      	uxth	r2, r2
 80017d2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017dc:	b29b      	uxth	r3, r3
 80017de:	461a      	mov	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	4413      	add	r3, r2
 80017e8:	3306      	adds	r3, #6
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	4413      	add	r3, r2
 80017f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d019      	beq.n	800183c <PCD_EP_ISR_Handler+0x1e4>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d015      	beq.n	800183c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6818      	ldr	r0, [r3, #0]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6959      	ldr	r1, [r3, #20]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001820:	b29b      	uxth	r3, r3
 8001822:	f002 fb27 	bl	8003e74 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	695a      	ldr	r2, [r3, #20]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	441a      	add	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001834:	2100      	movs	r1, #0
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f003 ff0e 	bl	8005658 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	461c      	mov	r4, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800184a:	b29b      	uxth	r3, r3
 800184c:	441c      	add	r4, r3
 800184e:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8001852:	461c      	mov	r4, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10e      	bne.n	800187a <PCD_EP_ISR_Handler+0x222>
 800185c:	8823      	ldrh	r3, [r4, #0]
 800185e:	b29b      	uxth	r3, r3
 8001860:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001864:	b29b      	uxth	r3, r3
 8001866:	8023      	strh	r3, [r4, #0]
 8001868:	8823      	ldrh	r3, [r4, #0]
 800186a:	b29b      	uxth	r3, r3
 800186c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001874:	b29b      	uxth	r3, r3
 8001876:	8023      	strh	r3, [r4, #0]
 8001878:	e02d      	b.n	80018d6 <PCD_EP_ISR_Handler+0x27e>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	2b3e      	cmp	r3, #62	; 0x3e
 8001880:	d812      	bhi.n	80018a8 <PCD_EP_ISR_Handler+0x250>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	085b      	lsrs	r3, r3, #1
 8001888:	61bb      	str	r3, [r7, #24]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d002      	beq.n	800189c <PCD_EP_ISR_Handler+0x244>
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	3301      	adds	r3, #1
 800189a:	61bb      	str	r3, [r7, #24]
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	029b      	lsls	r3, r3, #10
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	8023      	strh	r3, [r4, #0]
 80018a6:	e016      	b.n	80018d6 <PCD_EP_ISR_Handler+0x27e>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	095b      	lsrs	r3, r3, #5
 80018ae:	61bb      	str	r3, [r7, #24]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	f003 031f 	and.w	r3, r3, #31
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d102      	bne.n	80018c2 <PCD_EP_ISR_Handler+0x26a>
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	3b01      	subs	r3, #1
 80018c0:	61bb      	str	r3, [r7, #24]
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	029b      	lsls	r3, r3, #10
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018e6:	b29c      	uxth	r4, r3
 80018e8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80018ec:	b29c      	uxth	r4, r3
 80018ee:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80018f2:	b29c      	uxth	r4, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b97      	ldr	r3, [pc, #604]	; (8001b58 <PCD_EP_ISR_Handler+0x500>)
 80018fa:	4323      	orrs	r3, r4
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	8013      	strh	r3, [r2, #0]
 8001900:	e137      	b.n	8001b72 <PCD_EP_ISR_Handler+0x51a>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	7d7b      	ldrb	r3, [r7, #21]
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001912:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f280 80d1 	bge.w	8001abe <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	7d7b      	ldrb	r3, [r7, #21]
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	b29a      	uxth	r2, r3
 800192c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001930:	4013      	ands	r3, r2
 8001932:	b29c      	uxth	r4, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	7d7b      	ldrb	r3, [r7, #21]
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001944:	b292      	uxth	r2, r2
 8001946:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001948:	7d7b      	ldrb	r3, [r7, #21]
 800194a:	015b      	lsls	r3, r3, #5
 800194c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	4413      	add	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	7b1b      	ldrb	r3, [r3, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d121      	bne.n	80019a2 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001966:	b29b      	uxth	r3, r3
 8001968:	461a      	mov	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	4413      	add	r3, r2
 8001972:	3306      	adds	r3, #6
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6812      	ldr	r2, [r2, #0]
 800197a:	4413      	add	r3, r2
 800197c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001986:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001988:	8bfb      	ldrh	r3, [r7, #30]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d072      	beq.n	8001a74 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6959      	ldr	r1, [r3, #20]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	88da      	ldrh	r2, [r3, #6]
 800199a:	8bfb      	ldrh	r3, [r7, #30]
 800199c:	f002 fa6a 	bl	8003e74 <USB_ReadPMA>
 80019a0:	e068      	b.n	8001a74 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d021      	beq.n	8001a00 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	461a      	mov	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	4413      	add	r3, r2
 80019d0:	3302      	adds	r3, #2
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	4413      	add	r3, r2
 80019da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019e4:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80019e6:	8bfb      	ldrh	r3, [r7, #30]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d02a      	beq.n	8001a42 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6818      	ldr	r0, [r3, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6959      	ldr	r1, [r3, #20]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	891a      	ldrh	r2, [r3, #8]
 80019f8:	8bfb      	ldrh	r3, [r7, #30]
 80019fa:	f002 fa3b 	bl	8003e74 <USB_ReadPMA>
 80019fe:	e020      	b.n	8001a42 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	4413      	add	r3, r2
 8001a14:	3306      	adds	r3, #6
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a28:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001a2a:	8bfb      	ldrh	r3, [r7, #30]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d008      	beq.n	8001a42 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6818      	ldr	r0, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6959      	ldr	r1, [r3, #20]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	895a      	ldrh	r2, [r3, #10]
 8001a3c:	8bfb      	ldrh	r3, [r7, #30]
 8001a3e:	f002 fa19 	bl	8003e74 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	461a      	mov	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a5c:	b29c      	uxth	r4, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	441a      	add	r2, r3
 8001a6c:	4b3b      	ldr	r3, [pc, #236]	; (8001b5c <PCD_EP_ISR_Handler+0x504>)
 8001a6e:	4323      	orrs	r3, r4
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	69da      	ldr	r2, [r3, #28]
 8001a78:	8bfb      	ldrh	r3, [r7, #30]
 8001a7a:	441a      	add	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	695a      	ldr	r2, [r3, #20]
 8001a84:	8bfb      	ldrh	r3, [r7, #30]
 8001a86:	441a      	add	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d004      	beq.n	8001a9e <PCD_EP_ISR_Handler+0x446>
 8001a94:	8bfa      	ldrh	r2, [r7, #30]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d206      	bcs.n	8001aac <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f003 fdd7 	bl	8005658 <HAL_PCD_DataOutStageCallback>
 8001aaa:	e008      	b.n	8001abe <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	7819      	ldrb	r1, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	695a      	ldr	r2, [r3, #20]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff fcb2 	bl	8001422 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001abe:	8a7b      	ldrh	r3, [r7, #18]
 8001ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d054      	beq.n	8001b72 <PCD_EP_ISR_Handler+0x51a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001ac8:	7d7b      	ldrb	r3, [r7, #21]
 8001aca:	015b      	lsls	r3, r3, #5
 8001acc:	3328      	adds	r3, #40	; 0x28
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	7d7b      	ldrb	r3, [r7, #21]
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aec:	b29c      	uxth	r4, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	7d7b      	ldrb	r3, [r7, #21]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	441a      	add	r2, r3
 8001afa:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	461a      	mov	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4413      	add	r3, r2
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6812      	ldr	r2, [r2, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	441a      	add	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10b      	bne.n	8001b60 <PCD_EP_ISR_Handler+0x508>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f003 fd9a 	bl	8005688 <HAL_PCD_DataInStageCallback>
 8001b54:	e00d      	b.n	8001b72 <PCD_EP_ISR_Handler+0x51a>
 8001b56:	bf00      	nop
 8001b58:	ffff8080 	.word	0xffff8080
 8001b5c:	ffff80c0 	.word	0xffff80c0
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	7819      	ldrb	r1, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	695a      	ldr	r2, [r3, #20]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff fc92 	bl	8001496 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	b21b      	sxth	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f6ff ad6f 	blt.w	8001662 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3724      	adds	r7, #36	; 0x24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd90      	pop	{r4, r7, pc}
 8001b8e:	bf00      	nop

08001b90 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	817b      	strh	r3, [r7, #10]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001ba2:	897b      	ldrh	r3, [r7, #10]
 8001ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d008      	beq.n	8001bc0 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bae:	897b      	ldrh	r3, [r7, #10]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	015b      	lsls	r3, r3, #5
 8001bb6:	3328      	adds	r3, #40	; 0x28
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	4413      	add	r3, r2
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	e006      	b.n	8001bce <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001bc0:	897b      	ldrh	r3, [r7, #10]
 8001bc2:	015b      	lsls	r3, r3, #5
 8001bc4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	4413      	add	r3, r2
 8001bcc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001bce:	893b      	ldrh	r3, [r7, #8]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d107      	bne.n	8001be4 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	80da      	strh	r2, [r3, #6]
 8001be2:	e00b      	b.n	8001bfc <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2201      	movs	r2, #1
 8001be8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	0c1b      	lsrs	r3, r3, #16
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	371c      	adds	r7, #28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e272      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 8087 	beq.w	8001d36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c28:	4b92      	ldr	r3, [pc, #584]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d00c      	beq.n	8001c4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c34:	4b8f      	ldr	r3, [pc, #572]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d112      	bne.n	8001c66 <HAL_RCC_OscConfig+0x5e>
 8001c40:	4b8c      	ldr	r3, [pc, #560]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c4c:	d10b      	bne.n	8001c66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4e:	4b89      	ldr	r3, [pc, #548]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d06c      	beq.n	8001d34 <HAL_RCC_OscConfig+0x12c>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d168      	bne.n	8001d34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e24c      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6e:	d106      	bne.n	8001c7e <HAL_RCC_OscConfig+0x76>
 8001c70:	4b80      	ldr	r3, [pc, #512]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a7f      	ldr	r2, [pc, #508]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	e02e      	b.n	8001cdc <HAL_RCC_OscConfig+0xd4>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x98>
 8001c86:	4b7b      	ldr	r3, [pc, #492]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a7a      	ldr	r2, [pc, #488]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b78      	ldr	r3, [pc, #480]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a77      	ldr	r2, [pc, #476]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e01d      	b.n	8001cdc <HAL_RCC_OscConfig+0xd4>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca8:	d10c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0xbc>
 8001caa:	4b72      	ldr	r3, [pc, #456]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a71      	ldr	r2, [pc, #452]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	4b6f      	ldr	r3, [pc, #444]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a6e      	ldr	r2, [pc, #440]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	e00b      	b.n	8001cdc <HAL_RCC_OscConfig+0xd4>
 8001cc4:	4b6b      	ldr	r3, [pc, #428]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a6a      	ldr	r2, [pc, #424]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	4b68      	ldr	r3, [pc, #416]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a67      	ldr	r2, [pc, #412]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d013      	beq.n	8001d0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7fe fdf6 	bl	80008d4 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cec:	f7fe fdf2 	bl	80008d4 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	; 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e200      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	4b5d      	ldr	r3, [pc, #372]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0xe4>
 8001d0a:	e014      	b.n	8001d36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7fe fde2 	bl	80008d4 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d14:	f7fe fdde 	bl	80008d4 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	; 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e1ec      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d26:	4b53      	ldr	r3, [pc, #332]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x10c>
 8001d32:	e000      	b.n	8001d36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d063      	beq.n	8001e0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d42:	4b4c      	ldr	r3, [pc, #304]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00b      	beq.n	8001d66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d4e:	4b49      	ldr	r3, [pc, #292]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d11c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x18c>
 8001d5a:	4b46      	ldr	r3, [pc, #280]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d116      	bne.n	8001d94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d66:	4b43      	ldr	r3, [pc, #268]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_RCC_OscConfig+0x176>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d001      	beq.n	8001d7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e1c0      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4939      	ldr	r1, [pc, #228]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d92:	e03a      	b.n	8001e0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d020      	beq.n	8001dde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d9c:	4b36      	ldr	r3, [pc, #216]	; (8001e78 <HAL_RCC_OscConfig+0x270>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7fe fd97 	bl	80008d4 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001daa:	f7fe fd93 	bl	80008d4 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e1a1      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbc:	4b2d      	ldr	r3, [pc, #180]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f0      	beq.n	8001daa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4927      	ldr	r1, [pc, #156]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	600b      	str	r3, [r1, #0]
 8001ddc:	e015      	b.n	8001e0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dde:	4b26      	ldr	r3, [pc, #152]	; (8001e78 <HAL_RCC_OscConfig+0x270>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7fe fd76 	bl	80008d4 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dec:	f7fe fd72 	bl	80008d4 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e180      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d03a      	beq.n	8001e8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d019      	beq.n	8001e52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1e:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <HAL_RCC_OscConfig+0x274>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e24:	f7fe fd56 	bl	80008d4 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2c:	f7fe fd52 	bl	80008d4 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e160      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f000 faa6 	bl	800239c <RCC_Delay>
 8001e50:	e01c      	b.n	8001e8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e52:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <HAL_RCC_OscConfig+0x274>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e58:	f7fe fd3c 	bl	80008d4 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5e:	e00f      	b.n	8001e80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e60:	f7fe fd38 	bl	80008d4 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d908      	bls.n	8001e80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e146      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	42420000 	.word	0x42420000
 8001e7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e80:	4b92      	ldr	r3, [pc, #584]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1e9      	bne.n	8001e60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 80a6 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9e:	4b8b      	ldr	r3, [pc, #556]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10d      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	4b88      	ldr	r3, [pc, #544]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	4a87      	ldr	r2, [pc, #540]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	61d3      	str	r3, [r2, #28]
 8001eb6:	4b85      	ldr	r3, [pc, #532]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec6:	4b82      	ldr	r3, [pc, #520]	; (80020d0 <HAL_RCC_OscConfig+0x4c8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d118      	bne.n	8001f04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ed2:	4b7f      	ldr	r3, [pc, #508]	; (80020d0 <HAL_RCC_OscConfig+0x4c8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a7e      	ldr	r2, [pc, #504]	; (80020d0 <HAL_RCC_OscConfig+0x4c8>)
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ede:	f7fe fcf9 	bl	80008d4 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee6:	f7fe fcf5 	bl	80008d4 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b64      	cmp	r3, #100	; 0x64
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e103      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef8:	4b75      	ldr	r3, [pc, #468]	; (80020d0 <HAL_RCC_OscConfig+0x4c8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d106      	bne.n	8001f1a <HAL_RCC_OscConfig+0x312>
 8001f0c:	4b6f      	ldr	r3, [pc, #444]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4a6e      	ldr	r2, [pc, #440]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6213      	str	r3, [r2, #32]
 8001f18:	e02d      	b.n	8001f76 <HAL_RCC_OscConfig+0x36e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10c      	bne.n	8001f3c <HAL_RCC_OscConfig+0x334>
 8001f22:	4b6a      	ldr	r3, [pc, #424]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4a69      	ldr	r2, [pc, #420]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	f023 0301 	bic.w	r3, r3, #1
 8001f2c:	6213      	str	r3, [r2, #32]
 8001f2e:	4b67      	ldr	r3, [pc, #412]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	4a66      	ldr	r2, [pc, #408]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	f023 0304 	bic.w	r3, r3, #4
 8001f38:	6213      	str	r3, [r2, #32]
 8001f3a:	e01c      	b.n	8001f76 <HAL_RCC_OscConfig+0x36e>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	2b05      	cmp	r3, #5
 8001f42:	d10c      	bne.n	8001f5e <HAL_RCC_OscConfig+0x356>
 8001f44:	4b61      	ldr	r3, [pc, #388]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	4a60      	ldr	r2, [pc, #384]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f4a:	f043 0304 	orr.w	r3, r3, #4
 8001f4e:	6213      	str	r3, [r2, #32]
 8001f50:	4b5e      	ldr	r3, [pc, #376]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	4a5d      	ldr	r2, [pc, #372]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6213      	str	r3, [r2, #32]
 8001f5c:	e00b      	b.n	8001f76 <HAL_RCC_OscConfig+0x36e>
 8001f5e:	4b5b      	ldr	r3, [pc, #364]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	4a5a      	ldr	r2, [pc, #360]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	6213      	str	r3, [r2, #32]
 8001f6a:	4b58      	ldr	r3, [pc, #352]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	4a57      	ldr	r2, [pc, #348]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	f023 0304 	bic.w	r3, r3, #4
 8001f74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d015      	beq.n	8001faa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7e:	f7fe fca9 	bl	80008d4 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f84:	e00a      	b.n	8001f9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f86:	f7fe fca5 	bl	80008d4 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e0b1      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9c:	4b4b      	ldr	r3, [pc, #300]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0ee      	beq.n	8001f86 <HAL_RCC_OscConfig+0x37e>
 8001fa8:	e014      	b.n	8001fd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001faa:	f7fe fc93 	bl	80008d4 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb0:	e00a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb2:	f7fe fc8f 	bl	80008d4 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e09b      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc8:	4b40      	ldr	r3, [pc, #256]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1ee      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fd4:	7dfb      	ldrb	r3, [r7, #23]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d105      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fda:	4b3c      	ldr	r3, [pc, #240]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	4a3b      	ldr	r2, [pc, #236]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8087 	beq.w	80020fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ff0:	4b36      	ldr	r3, [pc, #216]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d061      	beq.n	80020c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	2b02      	cmp	r3, #2
 8002002:	d146      	bne.n	8002092 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002004:	4b33      	ldr	r3, [pc, #204]	; (80020d4 <HAL_RCC_OscConfig+0x4cc>)
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7fe fc63 	bl	80008d4 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002012:	f7fe fc5f 	bl	80008d4 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e06d      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002024:	4b29      	ldr	r3, [pc, #164]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1f0      	bne.n	8002012 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002038:	d108      	bne.n	800204c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800203a:	4b24      	ldr	r3, [pc, #144]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	4921      	ldr	r1, [pc, #132]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8002048:	4313      	orrs	r3, r2
 800204a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800204c:	4b1f      	ldr	r3, [pc, #124]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a19      	ldr	r1, [r3, #32]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	430b      	orrs	r3, r1
 800205e:	491b      	ldr	r1, [pc, #108]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002064:	4b1b      	ldr	r3, [pc, #108]	; (80020d4 <HAL_RCC_OscConfig+0x4cc>)
 8002066:	2201      	movs	r2, #1
 8002068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206a:	f7fe fc33 	bl	80008d4 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002072:	f7fe fc2f 	bl	80008d4 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e03d      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x46a>
 8002090:	e035      	b.n	80020fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002092:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <HAL_RCC_OscConfig+0x4cc>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7fe fc1c 	bl	80008d4 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a0:	f7fe fc18 	bl	80008d4 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e026      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x498>
 80020be:	e01e      	b.n	80020fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d107      	bne.n	80020d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e019      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40007000 	.word	0x40007000
 80020d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d106      	bne.n	80020fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d001      	beq.n	80020fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40021000 	.word	0x40021000

0800210c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0d0      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002120:	4b6a      	ldr	r3, [pc, #424]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d910      	bls.n	8002150 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b67      	ldr	r3, [pc, #412]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 0207 	bic.w	r2, r3, #7
 8002136:	4965      	ldr	r1, [pc, #404]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	4b63      	ldr	r3, [pc, #396]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0b8      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d020      	beq.n	800219e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002168:	4b59      	ldr	r3, [pc, #356]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4a58      	ldr	r2, [pc, #352]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002172:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002180:	4b53      	ldr	r3, [pc, #332]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4a52      	ldr	r2, [pc, #328]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002186:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800218a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800218c:	4b50      	ldr	r3, [pc, #320]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	494d      	ldr	r1, [pc, #308]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d040      	beq.n	800222c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	4b47      	ldr	r3, [pc, #284]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d115      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e07f      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d107      	bne.n	80021da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ca:	4b41      	ldr	r3, [pc, #260]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e073      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021da:	4b3d      	ldr	r3, [pc, #244]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e06b      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ea:	4b39      	ldr	r3, [pc, #228]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f023 0203 	bic.w	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4936      	ldr	r1, [pc, #216]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021fc:	f7fe fb6a 	bl	80008d4 <HAL_GetTick>
 8002200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002202:	e00a      	b.n	800221a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002204:	f7fe fb66 	bl	80008d4 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e053      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221a:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 020c 	and.w	r2, r3, #12
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	429a      	cmp	r2, r3
 800222a:	d1eb      	bne.n	8002204 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800222c:	4b27      	ldr	r3, [pc, #156]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d210      	bcs.n	800225c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b24      	ldr	r3, [pc, #144]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 0207 	bic.w	r2, r3, #7
 8002242:	4922      	ldr	r1, [pc, #136]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224a:	4b20      	ldr	r3, [pc, #128]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e032      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002268:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4916      	ldr	r1, [pc, #88]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	4313      	orrs	r3, r2
 8002278:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d009      	beq.n	800229a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002286:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	490e      	ldr	r1, [pc, #56]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	4313      	orrs	r3, r2
 8002298:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800229a:	f000 f821 	bl	80022e0 <HAL_RCC_GetSysClockFreq>
 800229e:	4602      	mov	r2, r0
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	490a      	ldr	r1, [pc, #40]	; (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 80022ac:	5ccb      	ldrb	r3, [r1, r3]
 80022ae:	fa22 f303 	lsr.w	r3, r2, r3
 80022b2:	4a09      	ldr	r2, [pc, #36]	; (80022d8 <HAL_RCC_ClockConfig+0x1cc>)
 80022b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <HAL_RCC_ClockConfig+0x1d0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe fac8 	bl	8000850 <HAL_InitTick>

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40022000 	.word	0x40022000
 80022d0:	40021000 	.word	0x40021000
 80022d4:	08005ba0 	.word	0x08005ba0
 80022d8:	20000000 	.word	0x20000000
 80022dc:	20000004 	.word	0x20000004

080022e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e0:	b490      	push	{r4, r7}
 80022e2:	b08a      	sub	sp, #40	; 0x28
 80022e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022e6:	4b29      	ldr	r3, [pc, #164]	; (800238c <HAL_RCC_GetSysClockFreq+0xac>)
 80022e8:	1d3c      	adds	r4, r7, #4
 80022ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022f0:	f240 2301 	movw	r3, #513	; 0x201
 80022f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	2300      	movs	r3, #0
 80022fc:	61bb      	str	r3, [r7, #24]
 80022fe:	2300      	movs	r3, #0
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800230a:	4b21      	ldr	r3, [pc, #132]	; (8002390 <HAL_RCC_GetSysClockFreq+0xb0>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f003 030c 	and.w	r3, r3, #12
 8002316:	2b04      	cmp	r3, #4
 8002318:	d002      	beq.n	8002320 <HAL_RCC_GetSysClockFreq+0x40>
 800231a:	2b08      	cmp	r3, #8
 800231c:	d003      	beq.n	8002326 <HAL_RCC_GetSysClockFreq+0x46>
 800231e:	e02b      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002320:	4b1c      	ldr	r3, [pc, #112]	; (8002394 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002322:	623b      	str	r3, [r7, #32]
      break;
 8002324:	e02b      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	0c9b      	lsrs	r3, r3, #18
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	3328      	adds	r3, #40	; 0x28
 8002330:	443b      	add	r3, r7
 8002332:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002336:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d012      	beq.n	8002368 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002342:	4b13      	ldr	r3, [pc, #76]	; (8002390 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	0c5b      	lsrs	r3, r3, #17
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	3328      	adds	r3, #40	; 0x28
 800234e:	443b      	add	r3, r7
 8002350:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002354:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	4a0e      	ldr	r2, [pc, #56]	; (8002394 <HAL_RCC_GetSysClockFreq+0xb4>)
 800235a:	fb03 f202 	mul.w	r2, r3, r2
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	fbb2 f3f3 	udiv	r3, r2, r3
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
 8002366:	e004      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	4a0b      	ldr	r2, [pc, #44]	; (8002398 <HAL_RCC_GetSysClockFreq+0xb8>)
 800236c:	fb02 f303 	mul.w	r3, r2, r3
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	623b      	str	r3, [r7, #32]
      break;
 8002376:	e002      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_RCC_GetSysClockFreq+0xb4>)
 800237a:	623b      	str	r3, [r7, #32]
      break;
 800237c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800237e:	6a3b      	ldr	r3, [r7, #32]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3728      	adds	r7, #40	; 0x28
 8002384:	46bd      	mov	sp, r7
 8002386:	bc90      	pop	{r4, r7}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	08005b48 	.word	0x08005b48
 8002390:	40021000 	.word	0x40021000
 8002394:	007a1200 	.word	0x007a1200
 8002398:	003d0900 	.word	0x003d0900

0800239c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023a4:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <RCC_Delay+0x34>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <RCC_Delay+0x38>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	0a5b      	lsrs	r3, r3, #9
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	fb02 f303 	mul.w	r3, r2, r3
 80023b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023b8:	bf00      	nop
  }
  while (Delay --);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1e5a      	subs	r2, r3, #1
 80023be:	60fa      	str	r2, [r7, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f9      	bne.n	80023b8 <RCC_Delay+0x1c>
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr
 80023d0:	20000000 	.word	0x20000000
 80023d4:	10624dd3 	.word	0x10624dd3

080023d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d07d      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80023f4:	2300      	movs	r3, #0
 80023f6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f8:	4b4f      	ldr	r3, [pc, #316]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10d      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002404:	4b4c      	ldr	r3, [pc, #304]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	4a4b      	ldr	r2, [pc, #300]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800240a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240e:	61d3      	str	r3, [r2, #28]
 8002410:	4b49      	ldr	r3, [pc, #292]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800241c:	2301      	movs	r3, #1
 800241e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002420:	4b46      	ldr	r3, [pc, #280]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002428:	2b00      	cmp	r3, #0
 800242a:	d118      	bne.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800242c:	4b43      	ldr	r3, [pc, #268]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a42      	ldr	r2, [pc, #264]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002436:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002438:	f7fe fa4c 	bl	80008d4 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243e:	e008      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002440:	f7fe fa48 	bl	80008d4 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b64      	cmp	r3, #100	; 0x64
 800244c:	d901      	bls.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e06d      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002452:	4b3a      	ldr	r3, [pc, #232]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800245e:	4b36      	ldr	r3, [pc, #216]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002466:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d02e      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	429a      	cmp	r2, r3
 800247a:	d027      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800247c:	4b2e      	ldr	r3, [pc, #184]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002484:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002486:	4b2e      	ldr	r3, [pc, #184]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002488:	2201      	movs	r2, #1
 800248a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800248c:	4b2c      	ldr	r3, [pc, #176]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002492:	4a29      	ldr	r2, [pc, #164]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d014      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7fe fa17 	bl	80008d4 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a8:	e00a      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024aa:	f7fe fa13 	bl	80008d4 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e036      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c0:	4b1d      	ldr	r3, [pc, #116]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0ee      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024cc:	4b1a      	ldr	r3, [pc, #104]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4917      	ldr	r1, [pc, #92]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024de:	7dfb      	ldrb	r3, [r7, #23]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d105      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e4:	4b14      	ldr	r3, [pc, #80]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	4a13      	ldr	r2, [pc, #76]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024fc:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	490b      	ldr	r1, [pc, #44]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800250a:	4313      	orrs	r3, r2
 800250c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	2b00      	cmp	r3, #0
 8002518:	d008      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800251a:	4b07      	ldr	r3, [pc, #28]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	4904      	ldr	r1, [pc, #16]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002528:	4313      	orrs	r3, r2
 800252a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40021000 	.word	0x40021000
 800253c:	40007000 	.word	0x40007000
 8002540:	42420440 	.word	0x42420440

08002544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e01d      	b.n	8002592 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d106      	bne.n	8002570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7fe f90e 	bl	800078c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2202      	movs	r2, #2
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3304      	adds	r3, #4
 8002580:	4619      	mov	r1, r3
 8002582:	4610      	mov	r0, r2
 8002584:	f000 fa1c 	bl	80029c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800259a:	b480      	push	{r7}
 800259c:	b085      	sub	sp, #20
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 0201 	orr.w	r2, r2, #1
 80025b0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b06      	cmp	r3, #6
 80025c2:	d007      	beq.n	80025d4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d122      	bne.n	800263c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b02      	cmp	r3, #2
 8002602:	d11b      	bne.n	800263c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0202 	mvn.w	r2, #2
 800260c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f9b1 	bl	800298a <HAL_TIM_IC_CaptureCallback>
 8002628:	e005      	b.n	8002636 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f9a4 	bl	8002978 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f9b3 	bl	800299c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	2b04      	cmp	r3, #4
 8002648:	d122      	bne.n	8002690 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b04      	cmp	r3, #4
 8002656:	d11b      	bne.n	8002690 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0204 	mvn.w	r2, #4
 8002660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2202      	movs	r2, #2
 8002666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f987 	bl	800298a <HAL_TIM_IC_CaptureCallback>
 800267c:	e005      	b.n	800268a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f97a 	bl	8002978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f989 	bl	800299c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b08      	cmp	r3, #8
 800269c:	d122      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d11b      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0208 	mvn.w	r2, #8
 80026b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2204      	movs	r2, #4
 80026ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f95d 	bl	800298a <HAL_TIM_IC_CaptureCallback>
 80026d0:	e005      	b.n	80026de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f950 	bl	8002978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f95f 	bl	800299c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	2b10      	cmp	r3, #16
 80026f0:	d122      	bne.n	8002738 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0310 	and.w	r3, r3, #16
 80026fc:	2b10      	cmp	r3, #16
 80026fe:	d11b      	bne.n	8002738 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0210 	mvn.w	r2, #16
 8002708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2208      	movs	r2, #8
 800270e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f933 	bl	800298a <HAL_TIM_IC_CaptureCallback>
 8002724:	e005      	b.n	8002732 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f926 	bl	8002978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f935 	bl	800299c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b01      	cmp	r3, #1
 8002744:	d10e      	bne.n	8002764 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b01      	cmp	r3, #1
 8002752:	d107      	bne.n	8002764 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0201 	mvn.w	r2, #1
 800275c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7fd ff10 	bl	8000584 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276e:	2b80      	cmp	r3, #128	; 0x80
 8002770:	d10e      	bne.n	8002790 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277c:	2b80      	cmp	r3, #128	; 0x80
 800277e:	d107      	bne.n	8002790 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 fa5d 	bl	8002c4a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279a:	2b40      	cmp	r3, #64	; 0x40
 800279c:	d10e      	bne.n	80027bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a8:	2b40      	cmp	r3, #64	; 0x40
 80027aa:	d107      	bne.n	80027bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f8f9 	bl	80029ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f003 0320 	and.w	r3, r3, #32
 80027c6:	2b20      	cmp	r3, #32
 80027c8:	d10e      	bne.n	80027e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	d107      	bne.n	80027e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f06f 0220 	mvn.w	r2, #32
 80027e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 fa28 	bl	8002c38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_TIM_ConfigClockSource+0x18>
 8002804:	2302      	movs	r3, #2
 8002806:	e0b3      	b.n	8002970 <HAL_TIM_ConfigClockSource+0x180>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002826:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800282e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002840:	d03e      	beq.n	80028c0 <HAL_TIM_ConfigClockSource+0xd0>
 8002842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002846:	f200 8087 	bhi.w	8002958 <HAL_TIM_ConfigClockSource+0x168>
 800284a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284e:	f000 8085 	beq.w	800295c <HAL_TIM_ConfigClockSource+0x16c>
 8002852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002856:	d87f      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x168>
 8002858:	2b70      	cmp	r3, #112	; 0x70
 800285a:	d01a      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0xa2>
 800285c:	2b70      	cmp	r3, #112	; 0x70
 800285e:	d87b      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x168>
 8002860:	2b60      	cmp	r3, #96	; 0x60
 8002862:	d050      	beq.n	8002906 <HAL_TIM_ConfigClockSource+0x116>
 8002864:	2b60      	cmp	r3, #96	; 0x60
 8002866:	d877      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x168>
 8002868:	2b50      	cmp	r3, #80	; 0x50
 800286a:	d03c      	beq.n	80028e6 <HAL_TIM_ConfigClockSource+0xf6>
 800286c:	2b50      	cmp	r3, #80	; 0x50
 800286e:	d873      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x168>
 8002870:	2b40      	cmp	r3, #64	; 0x40
 8002872:	d058      	beq.n	8002926 <HAL_TIM_ConfigClockSource+0x136>
 8002874:	2b40      	cmp	r3, #64	; 0x40
 8002876:	d86f      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x168>
 8002878:	2b30      	cmp	r3, #48	; 0x30
 800287a:	d064      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x156>
 800287c:	2b30      	cmp	r3, #48	; 0x30
 800287e:	d86b      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x168>
 8002880:	2b20      	cmp	r3, #32
 8002882:	d060      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x156>
 8002884:	2b20      	cmp	r3, #32
 8002886:	d867      	bhi.n	8002958 <HAL_TIM_ConfigClockSource+0x168>
 8002888:	2b00      	cmp	r3, #0
 800288a:	d05c      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x156>
 800288c:	2b10      	cmp	r3, #16
 800288e:	d05a      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002890:	e062      	b.n	8002958 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6899      	ldr	r1, [r3, #8]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f000 f966 	bl	8002b72 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	609a      	str	r2, [r3, #8]
      break;
 80028be:	e04e      	b.n	800295e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	6899      	ldr	r1, [r3, #8]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f000 f94f 	bl	8002b72 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028e2:	609a      	str	r2, [r3, #8]
      break;
 80028e4:	e03b      	b.n	800295e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	6859      	ldr	r1, [r3, #4]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	461a      	mov	r2, r3
 80028f4:	f000 f8c6 	bl	8002a84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2150      	movs	r1, #80	; 0x50
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 f91d 	bl	8002b3e <TIM_ITRx_SetConfig>
      break;
 8002904:	e02b      	b.n	800295e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6859      	ldr	r1, [r3, #4]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	461a      	mov	r2, r3
 8002914:	f000 f8e4 	bl	8002ae0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2160      	movs	r1, #96	; 0x60
 800291e:	4618      	mov	r0, r3
 8002920:	f000 f90d 	bl	8002b3e <TIM_ITRx_SetConfig>
      break;
 8002924:	e01b      	b.n	800295e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	6859      	ldr	r1, [r3, #4]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	461a      	mov	r2, r3
 8002934:	f000 f8a6 	bl	8002a84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2140      	movs	r1, #64	; 0x40
 800293e:	4618      	mov	r0, r3
 8002940:	f000 f8fd 	bl	8002b3e <TIM_ITRx_SetConfig>
      break;
 8002944:	e00b      	b.n	800295e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4619      	mov	r1, r3
 8002950:	4610      	mov	r0, r2
 8002952:	f000 f8f4 	bl	8002b3e <TIM_ITRx_SetConfig>
      break;
 8002956:	e002      	b.n	800295e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002958:	bf00      	nop
 800295a:	e000      	b.n	800295e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800295c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a29      	ldr	r2, [pc, #164]	; (8002a78 <TIM_Base_SetConfig+0xb8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d00b      	beq.n	80029f0 <TIM_Base_SetConfig+0x30>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029de:	d007      	beq.n	80029f0 <TIM_Base_SetConfig+0x30>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a26      	ldr	r2, [pc, #152]	; (8002a7c <TIM_Base_SetConfig+0xbc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d003      	beq.n	80029f0 <TIM_Base_SetConfig+0x30>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a25      	ldr	r2, [pc, #148]	; (8002a80 <TIM_Base_SetConfig+0xc0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d108      	bne.n	8002a02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a1c      	ldr	r2, [pc, #112]	; (8002a78 <TIM_Base_SetConfig+0xb8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00b      	beq.n	8002a22 <TIM_Base_SetConfig+0x62>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a10:	d007      	beq.n	8002a22 <TIM_Base_SetConfig+0x62>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a19      	ldr	r2, [pc, #100]	; (8002a7c <TIM_Base_SetConfig+0xbc>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d003      	beq.n	8002a22 <TIM_Base_SetConfig+0x62>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a18      	ldr	r2, [pc, #96]	; (8002a80 <TIM_Base_SetConfig+0xc0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d108      	bne.n	8002a34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a07      	ldr	r2, [pc, #28]	; (8002a78 <TIM_Base_SetConfig+0xb8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d103      	bne.n	8002a68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	615a      	str	r2, [r3, #20]
}
 8002a6e:	bf00      	nop
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	40012c00 	.word	0x40012c00
 8002a7c:	40000400 	.word	0x40000400
 8002a80:	40000800 	.word	0x40000800

08002a84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	f023 0201 	bic.w	r2, r3, #1
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f023 030a 	bic.w	r3, r3, #10
 8002ac0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	621a      	str	r2, [r3, #32]
}
 8002ad6:	bf00      	nop
 8002ad8:	371c      	adds	r7, #28
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr

08002ae0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	f023 0210 	bic.w	r2, r3, #16
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	031b      	lsls	r3, r3, #12
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	621a      	str	r2, [r3, #32]
}
 8002b34:	bf00      	nop
 8002b36:	371c      	adds	r7, #28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b085      	sub	sp, #20
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f043 0307 	orr.w	r3, r3, #7
 8002b60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	609a      	str	r2, [r3, #8]
}
 8002b68:	bf00      	nop
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr

08002b72 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b087      	sub	sp, #28
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	60f8      	str	r0, [r7, #12]
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	607a      	str	r2, [r7, #4]
 8002b7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b8c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	021a      	lsls	r2, r3, #8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	431a      	orrs	r2, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	609a      	str	r2, [r3, #8]
}
 8002ba6:	bf00      	nop
 8002ba8:	371c      	adds	r7, #28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e032      	b.n	8002c2e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c00:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr

08002c4a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr

08002c5c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002c5c:	b084      	sub	sp, #16
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	f107 0014 	add.w	r0, r7, #20
 8002c6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	b004      	add	sp, #16
 8002c7a:	4770      	bx	lr

08002c7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002c84:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002c88:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	89fb      	ldrh	r3, [r7, #14]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr

08002caa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b085      	sub	sp, #20
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002cb2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002cb6:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	b21a      	sxth	r2, r3
 8002cc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	b21b      	sxth	r3, r3
 8002cca:	4013      	ands	r3, r2
 8002ccc:	b21b      	sxth	r3, r3
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr

08002ce2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	460b      	mov	r3, r1
 8002cec:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr

08002cfa <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	f107 0014 	add.w	r0, r7, #20
 8002d08:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff ffa5 	bl	8002c7c <USB_EnableGlobalInt>

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d3e:	b004      	add	sp, #16
 8002d40:	4770      	bx	lr
	...

08002d44 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002d44:	b490      	push	{r4, r7}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d68:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	78db      	ldrb	r3, [r3, #3]
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d819      	bhi.n	8002da6 <USB_ActivateEndpoint+0x62>
 8002d72:	a201      	add	r2, pc, #4	; (adr r2, 8002d78 <USB_ActivateEndpoint+0x34>)
 8002d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d78:	08002d89 	.word	0x08002d89
 8002d7c:	08002d9d 	.word	0x08002d9d
 8002d80:	08002dad 	.word	0x08002dad
 8002d84:	08002d93 	.word	0x08002d93
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002d88:	89bb      	ldrh	r3, [r7, #12]
 8002d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d8e:	81bb      	strh	r3, [r7, #12]
      break;
 8002d90:	e00d      	b.n	8002dae <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002d92:	89bb      	ldrh	r3, [r7, #12]
 8002d94:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002d98:	81bb      	strh	r3, [r7, #12]
      break;
 8002d9a:	e008      	b.n	8002dae <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002d9c:	89bb      	ldrh	r3, [r7, #12]
 8002d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002da2:	81bb      	strh	r3, [r7, #12]
      break;
 8002da4:	e003      	b.n	8002dae <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	73fb      	strb	r3, [r7, #15]
      break;
 8002daa:	e000      	b.n	8002dae <USB_ActivateEndpoint+0x6a>
      break;
 8002dac:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	441a      	add	r2, r3
 8002db8:	89bb      	ldrh	r3, [r7, #12]
 8002dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	4313      	orrs	r3, r2
 8002dee:	b29c      	uxth	r4, r3
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	441a      	add	r2, r3
 8002dfa:	4b8a      	ldr	r3, [pc, #552]	; (8003024 <USB_ActivateEndpoint+0x2e0>)
 8002dfc:	4323      	orrs	r3, r4
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	7b1b      	ldrb	r3, [r3, #12]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f040 8112 	bne.w	8003030 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	785b      	ldrb	r3, [r3, #1]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d067      	beq.n	8002ee4 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e14:	687c      	ldr	r4, [r7, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	441c      	add	r4, r3
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	4423      	add	r3, r4
 8002e28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e2c:	461c      	mov	r4, r3
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	88db      	ldrh	r3, [r3, #6]
 8002e32:	085b      	lsrs	r3, r3, #1
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	b29c      	uxth	r4, r3
 8002e4a:	4623      	mov	r3, r4
 8002e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d014      	beq.n	8002e7e <USB_ActivateEndpoint+0x13a>
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e6a:	b29c      	uxth	r4, r3
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	441a      	add	r2, r3
 8002e76:	4b6c      	ldr	r3, [pc, #432]	; (8003028 <USB_ActivateEndpoint+0x2e4>)
 8002e78:	4323      	orrs	r3, r4
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	78db      	ldrb	r3, [r3, #3]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d018      	beq.n	8002eb8 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e9c:	b29c      	uxth	r4, r3
 8002e9e:	f084 0320 	eor.w	r3, r4, #32
 8002ea2:	b29c      	uxth	r4, r3
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	441a      	add	r2, r3
 8002eae:	4b5d      	ldr	r3, [pc, #372]	; (8003024 <USB_ActivateEndpoint+0x2e0>)
 8002eb0:	4323      	orrs	r3, r4
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	8013      	strh	r3, [r2, #0]
 8002eb6:	e22b      	b.n	8003310 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ece:	b29c      	uxth	r4, r3
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	441a      	add	r2, r3
 8002eda:	4b52      	ldr	r3, [pc, #328]	; (8003024 <USB_ActivateEndpoint+0x2e0>)
 8002edc:	4323      	orrs	r3, r4
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	8013      	strh	r3, [r2, #0]
 8002ee2:	e215      	b.n	8003310 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002ee4:	687c      	ldr	r4, [r7, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	441c      	add	r4, r3
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	4423      	add	r3, r4
 8002ef8:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002efc:	461c      	mov	r4, r3
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	88db      	ldrh	r3, [r3, #6]
 8002f02:	085b      	lsrs	r3, r3, #1
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002f0c:	687c      	ldr	r4, [r7, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	441c      	add	r4, r3
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	4423      	add	r3, r4
 8002f20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f24:	461c      	mov	r4, r3
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10e      	bne.n	8002f4c <USB_ActivateEndpoint+0x208>
 8002f2e:	8823      	ldrh	r3, [r4, #0]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	8023      	strh	r3, [r4, #0]
 8002f3a:	8823      	ldrh	r3, [r4, #0]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	8023      	strh	r3, [r4, #0]
 8002f4a:	e02d      	b.n	8002fa8 <USB_ActivateEndpoint+0x264>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	2b3e      	cmp	r3, #62	; 0x3e
 8002f52:	d812      	bhi.n	8002f7a <USB_ActivateEndpoint+0x236>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	085b      	lsrs	r3, r3, #1
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <USB_ActivateEndpoint+0x22a>
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	029b      	lsls	r3, r3, #10
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	8023      	strh	r3, [r4, #0]
 8002f78:	e016      	b.n	8002fa8 <USB_ActivateEndpoint+0x264>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	60bb      	str	r3, [r7, #8]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f003 031f 	and.w	r3, r3, #31
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d102      	bne.n	8002f94 <USB_ActivateEndpoint+0x250>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	3b01      	subs	r3, #1
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	029b      	lsls	r3, r3, #10
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	b29c      	uxth	r4, r3
 8002fb6:	4623      	mov	r3, r4
 8002fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d014      	beq.n	8002fea <USB_ActivateEndpoint+0x2a6>
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd6:	b29c      	uxth	r4, r3
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	441a      	add	r2, r3
 8002fe2:	4b12      	ldr	r3, [pc, #72]	; (800302c <USB_ActivateEndpoint+0x2e8>)
 8002fe4:	4323      	orrs	r3, r4
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003000:	b29c      	uxth	r4, r3
 8003002:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003006:	b29c      	uxth	r4, r3
 8003008:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800300c:	b29c      	uxth	r4, r3
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	441a      	add	r2, r3
 8003018:	4b02      	ldr	r3, [pc, #8]	; (8003024 <USB_ActivateEndpoint+0x2e0>)
 800301a:	4323      	orrs	r3, r4
 800301c:	b29b      	uxth	r3, r3
 800301e:	8013      	strh	r3, [r2, #0]
 8003020:	e176      	b.n	8003310 <USB_ActivateEndpoint+0x5cc>
 8003022:	bf00      	nop
 8003024:	ffff8080 	.word	0xffff8080
 8003028:	ffff80c0 	.word	0xffff80c0
 800302c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	881b      	ldrh	r3, [r3, #0]
 800303c:	b29b      	uxth	r3, r3
 800303e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003046:	b29c      	uxth	r4, r3
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	441a      	add	r2, r3
 8003052:	4b96      	ldr	r3, [pc, #600]	; (80032ac <USB_ActivateEndpoint+0x568>)
 8003054:	4323      	orrs	r3, r4
 8003056:	b29b      	uxth	r3, r3
 8003058:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800305a:	687c      	ldr	r4, [r7, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003062:	b29b      	uxth	r3, r3
 8003064:	441c      	add	r4, r3
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	4423      	add	r3, r4
 800306e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003072:	461c      	mov	r4, r3
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	891b      	ldrh	r3, [r3, #8]
 8003078:	085b      	lsrs	r3, r3, #1
 800307a:	b29b      	uxth	r3, r3
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	b29b      	uxth	r3, r3
 8003080:	8023      	strh	r3, [r4, #0]
 8003082:	687c      	ldr	r4, [r7, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800308a:	b29b      	uxth	r3, r3
 800308c:	441c      	add	r4, r3
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	4423      	add	r3, r4
 8003096:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800309a:	461c      	mov	r4, r3
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	895b      	ldrh	r3, [r3, #10]
 80030a0:	085b      	lsrs	r3, r3, #1
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	785b      	ldrb	r3, [r3, #1]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f040 8088 	bne.w	80031c4 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	b29c      	uxth	r4, r3
 80030c2:	4623      	mov	r3, r4
 80030c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d014      	beq.n	80030f6 <USB_ActivateEndpoint+0x3b2>
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e2:	b29c      	uxth	r4, r3
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	441a      	add	r2, r3
 80030ee:	4b70      	ldr	r3, [pc, #448]	; (80032b0 <USB_ActivateEndpoint+0x56c>)
 80030f0:	4323      	orrs	r3, r4
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	b29c      	uxth	r4, r3
 8003104:	4623      	mov	r3, r4
 8003106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310a:	2b00      	cmp	r3, #0
 800310c:	d014      	beq.n	8003138 <USB_ActivateEndpoint+0x3f4>
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	b29b      	uxth	r3, r3
 800311c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003124:	b29c      	uxth	r4, r3
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	441a      	add	r2, r3
 8003130:	4b60      	ldr	r3, [pc, #384]	; (80032b4 <USB_ActivateEndpoint+0x570>)
 8003132:	4323      	orrs	r3, r4
 8003134:	b29b      	uxth	r3, r3
 8003136:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	b29b      	uxth	r3, r3
 8003146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800314a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314e:	b29c      	uxth	r4, r3
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	441a      	add	r2, r3
 800315a:	4b56      	ldr	r3, [pc, #344]	; (80032b4 <USB_ActivateEndpoint+0x570>)
 800315c:	4323      	orrs	r3, r4
 800315e:	b29b      	uxth	r3, r3
 8003160:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	b29b      	uxth	r3, r3
 8003170:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003178:	b29c      	uxth	r4, r3
 800317a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800317e:	b29c      	uxth	r4, r3
 8003180:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003184:	b29c      	uxth	r4, r3
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	441a      	add	r2, r3
 8003190:	4b49      	ldr	r3, [pc, #292]	; (80032b8 <USB_ActivateEndpoint+0x574>)
 8003192:	4323      	orrs	r3, r4
 8003194:	b29b      	uxth	r3, r3
 8003196:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031ae:	b29c      	uxth	r4, r3
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	441a      	add	r2, r3
 80031ba:	4b3f      	ldr	r3, [pc, #252]	; (80032b8 <USB_ActivateEndpoint+0x574>)
 80031bc:	4323      	orrs	r3, r4
 80031be:	b29b      	uxth	r3, r3
 80031c0:	8013      	strh	r3, [r2, #0]
 80031c2:	e0a5      	b.n	8003310 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	b29c      	uxth	r4, r3
 80031d2:	4623      	mov	r3, r4
 80031d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d014      	beq.n	8003206 <USB_ActivateEndpoint+0x4c2>
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f2:	b29c      	uxth	r4, r3
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	441a      	add	r2, r3
 80031fe:	4b2c      	ldr	r3, [pc, #176]	; (80032b0 <USB_ActivateEndpoint+0x56c>)
 8003200:	4323      	orrs	r3, r4
 8003202:	b29b      	uxth	r3, r3
 8003204:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	b29c      	uxth	r4, r3
 8003214:	4623      	mov	r3, r4
 8003216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321a:	2b00      	cmp	r3, #0
 800321c:	d014      	beq.n	8003248 <USB_ActivateEndpoint+0x504>
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	b29b      	uxth	r3, r3
 800322c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003234:	b29c      	uxth	r4, r3
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	441a      	add	r2, r3
 8003240:	4b1c      	ldr	r3, [pc, #112]	; (80032b4 <USB_ActivateEndpoint+0x570>)
 8003242:	4323      	orrs	r3, r4
 8003244:	b29b      	uxth	r3, r3
 8003246:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	b29b      	uxth	r3, r3
 8003256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800325a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325e:	b29c      	uxth	r4, r3
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	441a      	add	r2, r3
 800326a:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <USB_ActivateEndpoint+0x56c>)
 800326c:	4323      	orrs	r3, r4
 800326e:	b29b      	uxth	r3, r3
 8003270:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	78db      	ldrb	r3, [r3, #3]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d020      	beq.n	80032bc <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	b29b      	uxth	r3, r3
 8003288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800328c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003290:	b29c      	uxth	r4, r3
 8003292:	f084 0320 	eor.w	r3, r4, #32
 8003296:	b29c      	uxth	r4, r3
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	441a      	add	r2, r3
 80032a2:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <USB_ActivateEndpoint+0x574>)
 80032a4:	4323      	orrs	r3, r4
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	8013      	strh	r3, [r2, #0]
 80032aa:	e01c      	b.n	80032e6 <USB_ActivateEndpoint+0x5a2>
 80032ac:	ffff8180 	.word	0xffff8180
 80032b0:	ffffc080 	.word	0xffffc080
 80032b4:	ffff80c0 	.word	0xffff80c0
 80032b8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032d2:	b29c      	uxth	r4, r3
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	441a      	add	r2, r3
 80032de:	4b0f      	ldr	r3, [pc, #60]	; (800331c <USB_ActivateEndpoint+0x5d8>)
 80032e0:	4323      	orrs	r3, r4
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fc:	b29c      	uxth	r4, r3
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	441a      	add	r2, r3
 8003308:	4b04      	ldr	r3, [pc, #16]	; (800331c <USB_ActivateEndpoint+0x5d8>)
 800330a:	4323      	orrs	r3, r4
 800330c:	b29b      	uxth	r3, r3
 800330e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003310:	7bfb      	ldrb	r3, [r7, #15]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bc90      	pop	{r4, r7}
 800331a:	4770      	bx	lr
 800331c:	ffff8080 	.word	0xffff8080

08003320 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003320:	b490      	push	{r4, r7}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	7b1b      	ldrb	r3, [r3, #12]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d171      	bne.n	8003416 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	785b      	ldrb	r3, [r3, #1]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d036      	beq.n	80033a8 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	b29c      	uxth	r4, r3
 8003348:	4623      	mov	r3, r4
 800334a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334e:	2b00      	cmp	r3, #0
 8003350:	d014      	beq.n	800337c <USB_DeactivateEndpoint+0x5c>
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	881b      	ldrh	r3, [r3, #0]
 800335e:	b29b      	uxth	r3, r3
 8003360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003368:	b29c      	uxth	r4, r3
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	441a      	add	r2, r3
 8003374:	4b6b      	ldr	r3, [pc, #428]	; (8003524 <USB_DeactivateEndpoint+0x204>)
 8003376:	4323      	orrs	r3, r4
 8003378:	b29b      	uxth	r3, r3
 800337a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	b29b      	uxth	r3, r3
 800338a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800338e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003392:	b29c      	uxth	r4, r3
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	441a      	add	r2, r3
 800339e:	4b62      	ldr	r3, [pc, #392]	; (8003528 <USB_DeactivateEndpoint+0x208>)
 80033a0:	4323      	orrs	r3, r4
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	8013      	strh	r3, [r2, #0]
 80033a6:	e144      	b.n	8003632 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	b29c      	uxth	r4, r3
 80033b6:	4623      	mov	r3, r4
 80033b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d014      	beq.n	80033ea <USB_DeactivateEndpoint+0xca>
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d6:	b29c      	uxth	r4, r3
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	441a      	add	r2, r3
 80033e2:	4b52      	ldr	r3, [pc, #328]	; (800352c <USB_DeactivateEndpoint+0x20c>)
 80033e4:	4323      	orrs	r3, r4
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003400:	b29c      	uxth	r4, r3
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	441a      	add	r2, r3
 800340c:	4b46      	ldr	r3, [pc, #280]	; (8003528 <USB_DeactivateEndpoint+0x208>)
 800340e:	4323      	orrs	r3, r4
 8003410:	b29b      	uxth	r3, r3
 8003412:	8013      	strh	r3, [r2, #0]
 8003414:	e10d      	b.n	8003632 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	785b      	ldrb	r3, [r3, #1]
 800341a:	2b00      	cmp	r3, #0
 800341c:	f040 8088 	bne.w	8003530 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	881b      	ldrh	r3, [r3, #0]
 800342c:	b29c      	uxth	r4, r3
 800342e:	4623      	mov	r3, r4
 8003430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d014      	beq.n	8003462 <USB_DeactivateEndpoint+0x142>
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	b29b      	uxth	r3, r3
 8003446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800344a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344e:	b29c      	uxth	r4, r3
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	441a      	add	r2, r3
 800345a:	4b34      	ldr	r3, [pc, #208]	; (800352c <USB_DeactivateEndpoint+0x20c>)
 800345c:	4323      	orrs	r3, r4
 800345e:	b29b      	uxth	r3, r3
 8003460:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	b29c      	uxth	r4, r3
 8003470:	4623      	mov	r3, r4
 8003472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003476:	2b00      	cmp	r3, #0
 8003478:	d014      	beq.n	80034a4 <USB_DeactivateEndpoint+0x184>
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800348c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003490:	b29c      	uxth	r4, r3
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	441a      	add	r2, r3
 800349c:	4b21      	ldr	r3, [pc, #132]	; (8003524 <USB_DeactivateEndpoint+0x204>)
 800349e:	4323      	orrs	r3, r4
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ba:	b29c      	uxth	r4, r3
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	441a      	add	r2, r3
 80034c6:	4b17      	ldr	r3, [pc, #92]	; (8003524 <USB_DeactivateEndpoint+0x204>)
 80034c8:	4323      	orrs	r3, r4
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	b29b      	uxth	r3, r3
 80034dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e4:	b29c      	uxth	r4, r3
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	441a      	add	r2, r3
 80034f0:	4b0d      	ldr	r3, [pc, #52]	; (8003528 <USB_DeactivateEndpoint+0x208>)
 80034f2:	4323      	orrs	r3, r4
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	b29b      	uxth	r3, r3
 8003506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800350a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800350e:	b29c      	uxth	r4, r3
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	441a      	add	r2, r3
 800351a:	4b03      	ldr	r3, [pc, #12]	; (8003528 <USB_DeactivateEndpoint+0x208>)
 800351c:	4323      	orrs	r3, r4
 800351e:	b29b      	uxth	r3, r3
 8003520:	8013      	strh	r3, [r2, #0]
 8003522:	e086      	b.n	8003632 <USB_DeactivateEndpoint+0x312>
 8003524:	ffff80c0 	.word	0xffff80c0
 8003528:	ffff8080 	.word	0xffff8080
 800352c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	b29c      	uxth	r4, r3
 800353e:	4623      	mov	r3, r4
 8003540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d014      	beq.n	8003572 <USB_DeactivateEndpoint+0x252>
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	b29b      	uxth	r3, r3
 8003556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800355a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355e:	b29c      	uxth	r4, r3
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	441a      	add	r2, r3
 800356a:	4b35      	ldr	r3, [pc, #212]	; (8003640 <USB_DeactivateEndpoint+0x320>)
 800356c:	4323      	orrs	r3, r4
 800356e:	b29b      	uxth	r3, r3
 8003570:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	b29c      	uxth	r4, r3
 8003580:	4623      	mov	r3, r4
 8003582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d014      	beq.n	80035b4 <USB_DeactivateEndpoint+0x294>
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	b29b      	uxth	r3, r3
 8003598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800359c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a0:	b29c      	uxth	r4, r3
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	441a      	add	r2, r3
 80035ac:	4b25      	ldr	r3, [pc, #148]	; (8003644 <USB_DeactivateEndpoint+0x324>)
 80035ae:	4323      	orrs	r3, r4
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ca:	b29c      	uxth	r4, r3
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	441a      	add	r2, r3
 80035d6:	4b1a      	ldr	r3, [pc, #104]	; (8003640 <USB_DeactivateEndpoint+0x320>)
 80035d8:	4323      	orrs	r3, r4
 80035da:	b29b      	uxth	r3, r3
 80035dc:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035f4:	b29c      	uxth	r4, r3
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	441a      	add	r2, r3
 8003600:	4b11      	ldr	r3, [pc, #68]	; (8003648 <USB_DeactivateEndpoint+0x328>)
 8003602:	4323      	orrs	r3, r4
 8003604:	b29b      	uxth	r3, r3
 8003606:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	b29b      	uxth	r3, r3
 8003616:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800361a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800361e:	b29c      	uxth	r4, r3
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	441a      	add	r2, r3
 800362a:	4b07      	ldr	r3, [pc, #28]	; (8003648 <USB_DeactivateEndpoint+0x328>)
 800362c:	4323      	orrs	r3, r4
 800362e:	b29b      	uxth	r3, r3
 8003630:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bc90      	pop	{r4, r7}
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	ffffc080 	.word	0xffffc080
 8003644:	ffff80c0 	.word	0xffff80c0
 8003648:	ffff8080 	.word	0xffff8080

0800364c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800364c:	b590      	push	{r4, r7, lr}
 800364e:	b08d      	sub	sp, #52	; 0x34
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	785b      	ldrb	r3, [r3, #1]
 800365a:	2b01      	cmp	r3, #1
 800365c:	f040 8160 	bne.w	8003920 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	699a      	ldr	r2, [r3, #24]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	429a      	cmp	r2, r3
 800366a:	d909      	bls.n	8003680 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	699a      	ldr	r2, [r3, #24]
 8003676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003678:	1ad2      	subs	r2, r2, r3
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	619a      	str	r2, [r3, #24]
 800367e:	e005      	b.n	800368c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2200      	movs	r2, #0
 800368a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	7b1b      	ldrb	r3, [r3, #12]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d119      	bne.n	80036c8 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	6959      	ldr	r1, [r3, #20]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	88da      	ldrh	r2, [r3, #6]
 800369c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369e:	b29b      	uxth	r3, r3
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fba2 	bl	8003dea <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80036a6:	687c      	ldr	r4, [r7, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	441c      	add	r4, r3
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	4423      	add	r3, r4
 80036ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80036be:	461c      	mov	r4, r3
 80036c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	8023      	strh	r3, [r4, #0]
 80036c6:	e10f      	b.n	80038e8 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d065      	beq.n	80037aa <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80036de:	687c      	ldr	r4, [r7, #4]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	785b      	ldrb	r3, [r3, #1]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d148      	bne.n	800377a <USB_EPStartXfer+0x12e>
 80036e8:	687c      	ldr	r4, [r7, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	441c      	add	r4, r3
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	4423      	add	r3, r4
 80036fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003700:	461c      	mov	r4, r3
 8003702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10e      	bne.n	8003726 <USB_EPStartXfer+0xda>
 8003708:	8823      	ldrh	r3, [r4, #0]
 800370a:	b29b      	uxth	r3, r3
 800370c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003710:	b29b      	uxth	r3, r3
 8003712:	8023      	strh	r3, [r4, #0]
 8003714:	8823      	ldrh	r3, [r4, #0]
 8003716:	b29b      	uxth	r3, r3
 8003718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800371c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003720:	b29b      	uxth	r3, r3
 8003722:	8023      	strh	r3, [r4, #0]
 8003724:	e03d      	b.n	80037a2 <USB_EPStartXfer+0x156>
 8003726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003728:	2b3e      	cmp	r3, #62	; 0x3e
 800372a:	d810      	bhi.n	800374e <USB_EPStartXfer+0x102>
 800372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372e:	085b      	lsrs	r3, r3, #1
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
 8003732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <USB_EPStartXfer+0xf6>
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	3301      	adds	r3, #1
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	b29b      	uxth	r3, r3
 8003746:	029b      	lsls	r3, r3, #10
 8003748:	b29b      	uxth	r3, r3
 800374a:	8023      	strh	r3, [r4, #0]
 800374c:	e029      	b.n	80037a2 <USB_EPStartXfer+0x156>
 800374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003750:	095b      	lsrs	r3, r3, #5
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
 8003754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003756:	f003 031f 	and.w	r3, r3, #31
 800375a:	2b00      	cmp	r3, #0
 800375c:	d102      	bne.n	8003764 <USB_EPStartXfer+0x118>
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	3b01      	subs	r3, #1
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	b29b      	uxth	r3, r3
 8003768:	029b      	lsls	r3, r3, #10
 800376a:	b29b      	uxth	r3, r3
 800376c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003774:	b29b      	uxth	r3, r3
 8003776:	8023      	strh	r3, [r4, #0]
 8003778:	e013      	b.n	80037a2 <USB_EPStartXfer+0x156>
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	785b      	ldrb	r3, [r3, #1]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d10f      	bne.n	80037a2 <USB_EPStartXfer+0x156>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003788:	b29b      	uxth	r3, r3
 800378a:	441c      	add	r4, r3
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	4423      	add	r3, r4
 8003794:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	895b      	ldrh	r3, [r3, #10]
 80037a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80037a8:	e063      	b.n	8003872 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	785b      	ldrb	r3, [r3, #1]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d148      	bne.n	8003844 <USB_EPStartXfer+0x1f8>
 80037b2:	687c      	ldr	r4, [r7, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	441c      	add	r4, r3
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	4423      	add	r3, r4
 80037c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80037ca:	461c      	mov	r4, r3
 80037cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10e      	bne.n	80037f0 <USB_EPStartXfer+0x1a4>
 80037d2:	8823      	ldrh	r3, [r4, #0]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037da:	b29b      	uxth	r3, r3
 80037dc:	8023      	strh	r3, [r4, #0]
 80037de:	8823      	ldrh	r3, [r4, #0]
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	8023      	strh	r3, [r4, #0]
 80037ee:	e03d      	b.n	800386c <USB_EPStartXfer+0x220>
 80037f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f2:	2b3e      	cmp	r3, #62	; 0x3e
 80037f4:	d810      	bhi.n	8003818 <USB_EPStartXfer+0x1cc>
 80037f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f8:	085b      	lsrs	r3, r3, #1
 80037fa:	623b      	str	r3, [r7, #32]
 80037fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <USB_EPStartXfer+0x1c0>
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	3301      	adds	r3, #1
 800380a:	623b      	str	r3, [r7, #32]
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	b29b      	uxth	r3, r3
 8003810:	029b      	lsls	r3, r3, #10
 8003812:	b29b      	uxth	r3, r3
 8003814:	8023      	strh	r3, [r4, #0]
 8003816:	e029      	b.n	800386c <USB_EPStartXfer+0x220>
 8003818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	623b      	str	r3, [r7, #32]
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	f003 031f 	and.w	r3, r3, #31
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <USB_EPStartXfer+0x1e2>
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	3b01      	subs	r3, #1
 800382c:	623b      	str	r3, [r7, #32]
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	b29b      	uxth	r3, r3
 8003832:	029b      	lsls	r3, r3, #10
 8003834:	b29b      	uxth	r3, r3
 8003836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800383a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800383e:	b29b      	uxth	r3, r3
 8003840:	8023      	strh	r3, [r4, #0]
 8003842:	e013      	b.n	800386c <USB_EPStartXfer+0x220>
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	785b      	ldrb	r3, [r3, #1]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d10f      	bne.n	800386c <USB_EPStartXfer+0x220>
 800384c:	687c      	ldr	r4, [r7, #4]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003854:	b29b      	uxth	r3, r3
 8003856:	441c      	add	r4, r3
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	4423      	add	r3, r4
 8003860:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003864:	461c      	mov	r4, r3
 8003866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003868:	b29b      	uxth	r3, r3
 800386a:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	891b      	ldrh	r3, [r3, #8]
 8003870:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	6959      	ldr	r1, [r3, #20]
 8003876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003878:	b29b      	uxth	r3, r3
 800387a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fab4 	bl	8003dea <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	785b      	ldrb	r3, [r3, #1]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d115      	bne.n	80038b6 <USB_EPStartXfer+0x26a>
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	b29b      	uxth	r3, r3
 8003898:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800389c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a0:	b29c      	uxth	r4, r3
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	441a      	add	r2, r3
 80038ac:	4b90      	ldr	r3, [pc, #576]	; (8003af0 <USB_EPStartXfer+0x4a4>)
 80038ae:	4323      	orrs	r3, r4
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	8013      	strh	r3, [r2, #0]
 80038b4:	e018      	b.n	80038e8 <USB_EPStartXfer+0x29c>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	785b      	ldrb	r3, [r3, #1]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d114      	bne.n	80038e8 <USB_EPStartXfer+0x29c>
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d4:	b29c      	uxth	r4, r3
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	441a      	add	r2, r3
 80038e0:	4b84      	ldr	r3, [pc, #528]	; (8003af4 <USB_EPStartXfer+0x4a8>)
 80038e2:	4323      	orrs	r3, r4
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038fe:	b29c      	uxth	r4, r3
 8003900:	f084 0310 	eor.w	r3, r4, #16
 8003904:	b29c      	uxth	r4, r3
 8003906:	f084 0320 	eor.w	r3, r4, #32
 800390a:	b29c      	uxth	r4, r3
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	441a      	add	r2, r3
 8003916:	4b78      	ldr	r3, [pc, #480]	; (8003af8 <USB_EPStartXfer+0x4ac>)
 8003918:	4323      	orrs	r3, r4
 800391a:	b29b      	uxth	r3, r3
 800391c:	8013      	strh	r3, [r2, #0]
 800391e:	e146      	b.n	8003bae <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	699a      	ldr	r2, [r3, #24]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	429a      	cmp	r2, r3
 800392a:	d909      	bls.n	8003940 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	699a      	ldr	r2, [r3, #24]
 8003936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003938:	1ad2      	subs	r2, r2, r3
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	619a      	str	r2, [r3, #24]
 800393e:	e005      	b.n	800394c <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2200      	movs	r2, #0
 800394a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	7b1b      	ldrb	r3, [r3, #12]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d148      	bne.n	80039e6 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003954:	687c      	ldr	r4, [r7, #4]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800395c:	b29b      	uxth	r3, r3
 800395e:	441c      	add	r4, r3
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	4423      	add	r3, r4
 8003968:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800396c:	461c      	mov	r4, r3
 800396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10e      	bne.n	8003992 <USB_EPStartXfer+0x346>
 8003974:	8823      	ldrh	r3, [r4, #0]
 8003976:	b29b      	uxth	r3, r3
 8003978:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800397c:	b29b      	uxth	r3, r3
 800397e:	8023      	strh	r3, [r4, #0]
 8003980:	8823      	ldrh	r3, [r4, #0]
 8003982:	b29b      	uxth	r3, r3
 8003984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800398c:	b29b      	uxth	r3, r3
 800398e:	8023      	strh	r3, [r4, #0]
 8003990:	e0f2      	b.n	8003b78 <USB_EPStartXfer+0x52c>
 8003992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003994:	2b3e      	cmp	r3, #62	; 0x3e
 8003996:	d810      	bhi.n	80039ba <USB_EPStartXfer+0x36e>
 8003998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399a:	085b      	lsrs	r3, r3, #1
 800399c:	61fb      	str	r3, [r7, #28]
 800399e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <USB_EPStartXfer+0x362>
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	3301      	adds	r3, #1
 80039ac:	61fb      	str	r3, [r7, #28]
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	029b      	lsls	r3, r3, #10
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	8023      	strh	r3, [r4, #0]
 80039b8:	e0de      	b.n	8003b78 <USB_EPStartXfer+0x52c>
 80039ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039bc:	095b      	lsrs	r3, r3, #5
 80039be:	61fb      	str	r3, [r7, #28]
 80039c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c2:	f003 031f 	and.w	r3, r3, #31
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d102      	bne.n	80039d0 <USB_EPStartXfer+0x384>
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	3b01      	subs	r3, #1
 80039ce:	61fb      	str	r3, [r7, #28]
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	029b      	lsls	r3, r3, #10
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	8023      	strh	r3, [r4, #0]
 80039e4:	e0c8      	b.n	8003b78 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	785b      	ldrb	r3, [r3, #1]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d148      	bne.n	8003a80 <USB_EPStartXfer+0x434>
 80039ee:	687c      	ldr	r4, [r7, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	441c      	add	r4, r3
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	4423      	add	r3, r4
 8003a02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a06:	461c      	mov	r4, r3
 8003a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10e      	bne.n	8003a2c <USB_EPStartXfer+0x3e0>
 8003a0e:	8823      	ldrh	r3, [r4, #0]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	8023      	strh	r3, [r4, #0]
 8003a1a:	8823      	ldrh	r3, [r4, #0]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	8023      	strh	r3, [r4, #0]
 8003a2a:	e03d      	b.n	8003aa8 <USB_EPStartXfer+0x45c>
 8003a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2e:	2b3e      	cmp	r3, #62	; 0x3e
 8003a30:	d810      	bhi.n	8003a54 <USB_EPStartXfer+0x408>
 8003a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a34:	085b      	lsrs	r3, r3, #1
 8003a36:	61bb      	str	r3, [r7, #24]
 8003a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <USB_EPStartXfer+0x3fc>
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	3301      	adds	r3, #1
 8003a46:	61bb      	str	r3, [r7, #24]
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	029b      	lsls	r3, r3, #10
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	8023      	strh	r3, [r4, #0]
 8003a52:	e029      	b.n	8003aa8 <USB_EPStartXfer+0x45c>
 8003a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	61bb      	str	r3, [r7, #24]
 8003a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5c:	f003 031f 	and.w	r3, r3, #31
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d102      	bne.n	8003a6a <USB_EPStartXfer+0x41e>
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	61bb      	str	r3, [r7, #24]
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	029b      	lsls	r3, r3, #10
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	8023      	strh	r3, [r4, #0]
 8003a7e:	e013      	b.n	8003aa8 <USB_EPStartXfer+0x45c>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	785b      	ldrb	r3, [r3, #1]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d10f      	bne.n	8003aa8 <USB_EPStartXfer+0x45c>
 8003a88:	687c      	ldr	r4, [r7, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	441c      	add	r4, r3
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	4423      	add	r3, r4
 8003a9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003aa0:	461c      	mov	r4, r3
 8003aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	8023      	strh	r3, [r4, #0]
 8003aa8:	687c      	ldr	r4, [r7, #4]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	785b      	ldrb	r3, [r3, #1]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d14e      	bne.n	8003b50 <USB_EPStartXfer+0x504>
 8003ab2:	687c      	ldr	r4, [r7, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	441c      	add	r4, r3
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	4423      	add	r3, r4
 8003ac6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003aca:	461c      	mov	r4, r3
 8003acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d114      	bne.n	8003afc <USB_EPStartXfer+0x4b0>
 8003ad2:	8823      	ldrh	r3, [r4, #0]
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	8023      	strh	r3, [r4, #0]
 8003ade:	8823      	ldrh	r3, [r4, #0]
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ae6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	8023      	strh	r3, [r4, #0]
 8003aee:	e043      	b.n	8003b78 <USB_EPStartXfer+0x52c>
 8003af0:	ffff80c0 	.word	0xffff80c0
 8003af4:	ffffc080 	.word	0xffffc080
 8003af8:	ffff8080 	.word	0xffff8080
 8003afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afe:	2b3e      	cmp	r3, #62	; 0x3e
 8003b00:	d810      	bhi.n	8003b24 <USB_EPStartXfer+0x4d8>
 8003b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b04:	085b      	lsrs	r3, r3, #1
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <USB_EPStartXfer+0x4cc>
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	3301      	adds	r3, #1
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	029b      	lsls	r3, r3, #10
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	8023      	strh	r3, [r4, #0]
 8003b22:	e029      	b.n	8003b78 <USB_EPStartXfer+0x52c>
 8003b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b26:	095b      	lsrs	r3, r3, #5
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d102      	bne.n	8003b3a <USB_EPStartXfer+0x4ee>
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	617b      	str	r3, [r7, #20]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	029b      	lsls	r3, r3, #10
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	8023      	strh	r3, [r4, #0]
 8003b4e:	e013      	b.n	8003b78 <USB_EPStartXfer+0x52c>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	785b      	ldrb	r3, [r3, #1]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d10f      	bne.n	8003b78 <USB_EPStartXfer+0x52c>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	441c      	add	r4, r3
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	4423      	add	r3, r4
 8003b6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b6e:	613b      	str	r3, [r7, #16]
 8003b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	881b      	ldrh	r3, [r3, #0]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8e:	b29c      	uxth	r4, r3
 8003b90:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003b94:	b29c      	uxth	r4, r3
 8003b96:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003b9a:	b29c      	uxth	r4, r3
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	441a      	add	r2, r3
 8003ba6:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <USB_EPStartXfer+0x56c>)
 8003ba8:	4323      	orrs	r3, r4
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3734      	adds	r7, #52	; 0x34
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd90      	pop	{r4, r7, pc}
 8003bb8:	ffff8080 	.word	0xffff8080

08003bbc <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003bbc:	b490      	push	{r4, r7}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	785b      	ldrb	r3, [r3, #1]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d018      	beq.n	8003c00 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003be4:	b29c      	uxth	r4, r3
 8003be6:	f084 0310 	eor.w	r3, r4, #16
 8003bea:	b29c      	uxth	r4, r3
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	441a      	add	r2, r3
 8003bf6:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <USB_EPSetStall+0x80>)
 8003bf8:	4323      	orrs	r3, r4
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	8013      	strh	r3, [r2, #0]
 8003bfe:	e017      	b.n	8003c30 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c16:	b29c      	uxth	r4, r3
 8003c18:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003c1c:	b29c      	uxth	r4, r3
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	441a      	add	r2, r3
 8003c28:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <USB_EPSetStall+0x80>)
 8003c2a:	4323      	orrs	r3, r4
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc90      	pop	{r4, r7}
 8003c3a:	4770      	bx	lr
 8003c3c:	ffff8080 	.word	0xffff8080

08003c40 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c40:	b490      	push	{r4, r7}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	7b1b      	ldrb	r3, [r3, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d17d      	bne.n	8003d4e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	785b      	ldrb	r3, [r3, #1]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d03d      	beq.n	8003cd6 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	b29c      	uxth	r4, r3
 8003c68:	4623      	mov	r3, r4
 8003c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d014      	beq.n	8003c9c <USB_EPClearStall+0x5c>
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c88:	b29c      	uxth	r4, r3
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	441a      	add	r2, r3
 8003c94:	4b31      	ldr	r3, [pc, #196]	; (8003d5c <USB_EPClearStall+0x11c>)
 8003c96:	4323      	orrs	r3, r4
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	78db      	ldrb	r3, [r3, #3]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d054      	beq.n	8003d4e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	881b      	ldrh	r3, [r3, #0]
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cba:	b29c      	uxth	r4, r3
 8003cbc:	f084 0320 	eor.w	r3, r4, #32
 8003cc0:	b29c      	uxth	r4, r3
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	441a      	add	r2, r3
 8003ccc:	4b24      	ldr	r3, [pc, #144]	; (8003d60 <USB_EPClearStall+0x120>)
 8003cce:	4323      	orrs	r3, r4
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	8013      	strh	r3, [r2, #0]
 8003cd4:	e03b      	b.n	8003d4e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	b29c      	uxth	r4, r3
 8003ce4:	4623      	mov	r3, r4
 8003ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d014      	beq.n	8003d18 <USB_EPClearStall+0xd8>
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d04:	b29c      	uxth	r4, r3
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	441a      	add	r2, r3
 8003d10:	4b14      	ldr	r3, [pc, #80]	; (8003d64 <USB_EPClearStall+0x124>)
 8003d12:	4323      	orrs	r3, r4
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2e:	b29c      	uxth	r4, r3
 8003d30:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003d34:	b29c      	uxth	r4, r3
 8003d36:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003d3a:	b29c      	uxth	r4, r3
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	441a      	add	r2, r3
 8003d46:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <USB_EPClearStall+0x120>)
 8003d48:	4323      	orrs	r3, r4
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc90      	pop	{r4, r7}
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	ffff80c0 	.word	0xffff80c0
 8003d60:	ffff8080 	.word	0xffff8080
 8003d64:	ffffc080 	.word	0xffffc080

08003d68 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8003d74:	78fb      	ldrb	r3, [r7, #3]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d103      	bne.n	8003d82 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2280      	movs	r2, #128	; 0x80
 8003d7e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bc80      	pop	{r7}
 8003d8c:	4770      	bx	lr

08003d8e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bc80      	pop	{r7}
 8003da0:	4770      	bx	lr

08003da2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bc80      	pop	{r7}
 8003db4:	4770      	bx	lr

08003db6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b085      	sub	sp, #20
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr

08003dd4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc80      	pop	{r7}
 8003de8:	4770      	bx	lr

08003dea <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b08d      	sub	sp, #52	; 0x34
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	4611      	mov	r1, r2
 8003df6:	461a      	mov	r2, r3
 8003df8:	460b      	mov	r3, r1
 8003dfa:	80fb      	strh	r3, [r7, #6]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003e00:	88bb      	ldrh	r3, [r7, #4]
 8003e02:	3301      	adds	r3, #1
 8003e04:	085b      	lsrs	r3, r3, #1
 8003e06:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003e10:	88fb      	ldrh	r3, [r7, #6]
 8003e12:	005a      	lsls	r2, r3, #1
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e1c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e22:	e01e      	b.n	8003e62 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	021b      	lsls	r3, r3, #8
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e48:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4c:	3302      	adds	r3, #2
 8003e4e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8003e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e52:	3302      	adds	r3, #2
 8003e54:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	3301      	adds	r3, #1
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1dd      	bne.n	8003e24 <USB_WritePMA+0x3a>
  }
}
 8003e68:	bf00      	nop
 8003e6a:	bf00      	nop
 8003e6c:	3734      	adds	r7, #52	; 0x34
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bc80      	pop	{r7}
 8003e72:	4770      	bx	lr

08003e74 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b08b      	sub	sp, #44	; 0x2c
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	4611      	mov	r1, r2
 8003e80:	461a      	mov	r2, r3
 8003e82:	460b      	mov	r3, r1
 8003e84:	80fb      	strh	r3, [r7, #6]
 8003e86:	4613      	mov	r3, r2
 8003e88:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003e8a:	88bb      	ldrh	r3, [r7, #4]
 8003e8c:	085b      	lsrs	r3, r3, #1
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003e9a:	88fb      	ldrh	r3, [r7, #6]
 8003e9c:	005a      	lsls	r2, r3, #1
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ea6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8003eac:	e01b      	b.n	8003ee6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	3302      	adds	r3, #2
 8003eba:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	0a1b      	lsrs	r3, r3, #8
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	3302      	adds	r3, #2
 8003ede:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1e0      	bne.n	8003eae <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003eec:	88bb      	ldrh	r3, [r7, #4]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d007      	beq.n	8003f08 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	701a      	strb	r2, [r3, #0]
  }
}
 8003f08:	bf00      	nop
 8003f0a:	372c      	adds	r7, #44	; 0x2c
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr

08003f12 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8003f1e:	2304      	movs	r3, #4
 8003f20:	2203      	movs	r2, #3
 8003f22:	2181      	movs	r1, #129	; 0x81
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f001 fc7e 	bl	8005826 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8003f30:	2010      	movs	r0, #16
 8003f32:	f001 fd85 	bl	8005a40 <USBD_static_malloc>
 8003f36:	4602      	mov	r2, r0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e005      	b.n	8003f58 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003f52:	2200      	movs	r2, #0
 8003f54:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8003f6c:	2181      	movs	r1, #129	; 0x81
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f001 fc7f 	bl	8005872 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d009      	beq.n	8003f98 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f001 fd64 	bl	8005a58 <USBD_static_free>
    pdev->pClassData = NULL;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b088      	sub	sp, #32
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003fb4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d045      	beq.n	800405e <USBD_HID_Setup+0xba>
 8003fd2:	2b20      	cmp	r3, #32
 8003fd4:	f040 80d3 	bne.w	800417e <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	785b      	ldrb	r3, [r3, #1]
 8003fdc:	3b02      	subs	r3, #2
 8003fde:	2b09      	cmp	r3, #9
 8003fe0:	d835      	bhi.n	800404e <USBD_HID_Setup+0xaa>
 8003fe2:	a201      	add	r2, pc, #4	; (adr r2, 8003fe8 <USBD_HID_Setup+0x44>)
 8003fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe8:	0800403f 	.word	0x0800403f
 8003fec:	0800401f 	.word	0x0800401f
 8003ff0:	0800404f 	.word	0x0800404f
 8003ff4:	0800404f 	.word	0x0800404f
 8003ff8:	0800404f 	.word	0x0800404f
 8003ffc:	0800404f 	.word	0x0800404f
 8004000:	0800404f 	.word	0x0800404f
 8004004:	0800404f 	.word	0x0800404f
 8004008:	0800402d 	.word	0x0800402d
 800400c:	08004011 	.word	0x08004011
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	885b      	ldrh	r3, [r3, #2]
 8004014:	b2db      	uxtb	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	601a      	str	r2, [r3, #0]
          break;
 800401c:	e01e      	b.n	800405c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	2201      	movs	r2, #1
 8004022:	4619      	mov	r1, r3
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f001 f944 	bl	80052b2 <USBD_CtlSendData>
          break;
 800402a:	e017      	b.n	800405c <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	885b      	ldrh	r3, [r3, #2]
 8004030:	0a1b      	lsrs	r3, r3, #8
 8004032:	b29b      	uxth	r3, r3
 8004034:	b2db      	uxtb	r3, r3
 8004036:	461a      	mov	r2, r3
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	605a      	str	r2, [r3, #4]
          break;
 800403c:	e00e      	b.n	800405c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	3304      	adds	r3, #4
 8004042:	2201      	movs	r2, #1
 8004044:	4619      	mov	r1, r3
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f001 f933 	bl	80052b2 <USBD_CtlSendData>
          break;
 800404c:	e006      	b.n	800405c <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 800404e:	6839      	ldr	r1, [r7, #0]
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f001 f8c4 	bl	80051de <USBD_CtlError>
          ret = USBD_FAIL;
 8004056:	2302      	movs	r3, #2
 8004058:	75fb      	strb	r3, [r7, #23]
          break;
 800405a:	bf00      	nop
      }
      break;
 800405c:	e096      	b.n	800418c <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	785b      	ldrb	r3, [r3, #1]
 8004062:	2b0b      	cmp	r3, #11
 8004064:	f200 8083 	bhi.w	800416e <USBD_HID_Setup+0x1ca>
 8004068:	a201      	add	r2, pc, #4	; (adr r2, 8004070 <USBD_HID_Setup+0xcc>)
 800406a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406e:	bf00      	nop
 8004070:	080040a1 	.word	0x080040a1
 8004074:	0800416f 	.word	0x0800416f
 8004078:	0800416f 	.word	0x0800416f
 800407c:	0800416f 	.word	0x0800416f
 8004080:	0800416f 	.word	0x0800416f
 8004084:	0800416f 	.word	0x0800416f
 8004088:	080040c9 	.word	0x080040c9
 800408c:	0800416f 	.word	0x0800416f
 8004090:	0800416f 	.word	0x0800416f
 8004094:	0800416f 	.word	0x0800416f
 8004098:	08004121 	.word	0x08004121
 800409c:	08004149 	.word	0x08004149
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d107      	bne.n	80040ba <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80040aa:	f107 030e 	add.w	r3, r7, #14
 80040ae:	2202      	movs	r2, #2
 80040b0:	4619      	mov	r1, r3
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f001 f8fd 	bl	80052b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80040b8:	e060      	b.n	800417c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80040ba:	6839      	ldr	r1, [r7, #0]
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f001 f88e 	bl	80051de <USBD_CtlError>
            ret = USBD_FAIL;
 80040c2:	2302      	movs	r3, #2
 80040c4:	75fb      	strb	r3, [r7, #23]
          break;
 80040c6:	e059      	b.n	800417c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	885b      	ldrh	r3, [r3, #2]
 80040cc:	0a1b      	lsrs	r3, r3, #8
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2b22      	cmp	r3, #34	; 0x22
 80040d2:	d108      	bne.n	80040e6 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	88db      	ldrh	r3, [r3, #6]
 80040d8:	2b4a      	cmp	r3, #74	; 0x4a
 80040da:	bf28      	it	cs
 80040dc:	234a      	movcs	r3, #74	; 0x4a
 80040de:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 80040e0:	4b2d      	ldr	r3, [pc, #180]	; (8004198 <USBD_HID_Setup+0x1f4>)
 80040e2:	61bb      	str	r3, [r7, #24]
 80040e4:	e015      	b.n	8004112 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	885b      	ldrh	r3, [r3, #2]
 80040ea:	0a1b      	lsrs	r3, r3, #8
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b21      	cmp	r3, #33	; 0x21
 80040f0:	d108      	bne.n	8004104 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 80040f2:	4b2a      	ldr	r3, [pc, #168]	; (800419c <USBD_HID_Setup+0x1f8>)
 80040f4:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	88db      	ldrh	r3, [r3, #6]
 80040fa:	2b09      	cmp	r3, #9
 80040fc:	bf28      	it	cs
 80040fe:	2309      	movcs	r3, #9
 8004100:	83fb      	strh	r3, [r7, #30]
 8004102:	e006      	b.n	8004112 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8004104:	6839      	ldr	r1, [r7, #0]
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f001 f869 	bl	80051de <USBD_CtlError>
            ret = USBD_FAIL;
 800410c:	2302      	movs	r3, #2
 800410e:	75fb      	strb	r3, [r7, #23]
            break;
 8004110:	e034      	b.n	800417c <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8004112:	8bfb      	ldrh	r3, [r7, #30]
 8004114:	461a      	mov	r2, r3
 8004116:	69b9      	ldr	r1, [r7, #24]
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f001 f8ca 	bl	80052b2 <USBD_CtlSendData>
          break;
 800411e:	e02d      	b.n	800417c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004126:	2b03      	cmp	r3, #3
 8004128:	d107      	bne.n	800413a <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	3308      	adds	r3, #8
 800412e:	2201      	movs	r2, #1
 8004130:	4619      	mov	r1, r3
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f001 f8bd 	bl	80052b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004138:	e020      	b.n	800417c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800413a:	6839      	ldr	r1, [r7, #0]
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f001 f84e 	bl	80051de <USBD_CtlError>
            ret = USBD_FAIL;
 8004142:	2302      	movs	r3, #2
 8004144:	75fb      	strb	r3, [r7, #23]
          break;
 8004146:	e019      	b.n	800417c <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800414e:	2b03      	cmp	r3, #3
 8004150:	d106      	bne.n	8004160 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	885b      	ldrh	r3, [r3, #2]
 8004156:	b2db      	uxtb	r3, r3
 8004158:	461a      	mov	r2, r3
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800415e:	e00d      	b.n	800417c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8004160:	6839      	ldr	r1, [r7, #0]
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f001 f83b 	bl	80051de <USBD_CtlError>
            ret = USBD_FAIL;
 8004168:	2302      	movs	r3, #2
 800416a:	75fb      	strb	r3, [r7, #23]
          break;
 800416c:	e006      	b.n	800417c <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800416e:	6839      	ldr	r1, [r7, #0]
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f001 f834 	bl	80051de <USBD_CtlError>
          ret = USBD_FAIL;
 8004176:	2302      	movs	r3, #2
 8004178:	75fb      	strb	r3, [r7, #23]
          break;
 800417a:	bf00      	nop
      }
      break;
 800417c:	e006      	b.n	800418c <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800417e:	6839      	ldr	r1, [r7, #0]
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f001 f82c 	bl	80051de <USBD_CtlError>
      ret = USBD_FAIL;
 8004186:	2302      	movs	r3, #2
 8004188:	75fb      	strb	r3, [r7, #23]
      break;
 800418a:	bf00      	nop
  }

  return ret;
 800418c:	7dfb      	ldrb	r3, [r7, #23]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3720      	adds	r7, #32
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	200000c8 	.word	0x200000c8
 800419c:	200000b0 	.word	0x200000b0

080041a0 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	4613      	mov	r3, r2
 80041ac:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80041b4:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d10c      	bne.n	80041da <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	7b1b      	ldrb	r3, [r3, #12]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d108      	bne.n	80041da <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2201      	movs	r2, #1
 80041cc:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 80041ce:	88fb      	ldrh	r3, [r7, #6]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	2181      	movs	r1, #129	; 0x81
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f001 fbed 	bl	80059b4 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2222      	movs	r2, #34	; 0x22
 80041f0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80041f2:	4b03      	ldr	r3, [pc, #12]	; (8004200 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	20000044 	.word	0x20000044

08004204 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2222      	movs	r2, #34	; 0x22
 8004210:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8004212:	4b03      	ldr	r3, [pc, #12]	; (8004220 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8004214:	4618      	mov	r0, r3
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	20000068 	.word	0x20000068

08004224 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2222      	movs	r2, #34	; 0x22
 8004230:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8004232:	4b03      	ldr	r3, [pc, #12]	; (8004240 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004234:	4618      	mov	r0, r3
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	2000008c 	.word	0x2000008c

08004244 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	460b      	mov	r3, r1
 800424e:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004256:	2200      	movs	r2, #0
 8004258:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr
	...

08004268 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	220a      	movs	r2, #10
 8004274:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8004276:	4b03      	ldr	r3, [pc, #12]	; (8004284 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004278:	4618      	mov	r0, r3
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	bc80      	pop	{r7}
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	200000bc 	.word	0x200000bc

08004288 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	4613      	mov	r3, r2
 8004294:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800429c:	2302      	movs	r3, #2
 800429e:	e01a      	b.n	80042d6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	79fa      	ldrb	r2, [r7, #7]
 80042cc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f001 fa46 	bl	8005760 <USBD_LL_Init>

  return USBD_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80042de:	b480      	push	{r7}
 80042e0:	b085      	sub	sp, #20
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80042e8:	2300      	movs	r3, #0
 80042ea:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d006      	beq.n	8004300 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	73fb      	strb	r3, [r7, #15]
 80042fe:	e001      	b.n	8004304 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004300:	2302      	movs	r3, #2
 8004302:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004304:	7bfb      	ldrb	r3, [r7, #15]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr

08004310 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f001 fa69 	bl	80057f0 <USBD_LL_Start>

  return USBD_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr

0800433c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	460b      	mov	r3, r1
 8004346:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004348:	2302      	movs	r3, #2
 800434a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00c      	beq.n	8004370 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	78fa      	ldrb	r2, [r7, #3]
 8004360:	4611      	mov	r1, r2
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	4798      	blx	r3
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004370:	7bfb      	ldrb	r3, [r7, #15]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b082      	sub	sp, #8
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	460b      	mov	r3, r1
 8004384:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	78fa      	ldrb	r2, [r7, #3]
 8004390:	4611      	mov	r1, r2
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	4798      	blx	r3

  return USBD_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80043b0:	6839      	ldr	r1, [r7, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 fed7 	bl	8005166 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80043c6:	461a      	mov	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80043d4:	f003 031f 	and.w	r3, r3, #31
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d016      	beq.n	800440a <USBD_LL_SetupStage+0x6a>
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d81c      	bhi.n	800441a <USBD_LL_SetupStage+0x7a>
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <USBD_LL_SetupStage+0x4a>
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d008      	beq.n	80043fa <USBD_LL_SetupStage+0x5a>
 80043e8:	e017      	b.n	800441a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80043f0:	4619      	mov	r1, r3
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f9ca 	bl	800478c <USBD_StdDevReq>
      break;
 80043f8:	e01a      	b.n	8004430 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004400:	4619      	mov	r1, r3
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fa2c 	bl	8004860 <USBD_StdItfReq>
      break;
 8004408:	e012      	b.n	8004430 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004410:	4619      	mov	r1, r3
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fa6c 	bl	80048f0 <USBD_StdEPReq>
      break;
 8004418:	e00a      	b.n	8004430 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004420:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004424:	b2db      	uxtb	r3, r3
 8004426:	4619      	mov	r1, r3
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f001 fa41 	bl	80058b0 <USBD_LL_StallEP>
      break;
 800442e:	bf00      	nop
  }

  return USBD_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b086      	sub	sp, #24
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	460b      	mov	r3, r1
 8004444:	607a      	str	r2, [r7, #4]
 8004446:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004448:	7afb      	ldrb	r3, [r7, #11]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d14b      	bne.n	80044e6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004454:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800445c:	2b03      	cmp	r3, #3
 800445e:	d134      	bne.n	80044ca <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	429a      	cmp	r2, r3
 800446a:	d919      	bls.n	80044a0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	1ad2      	subs	r2, r2, r3
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004482:	429a      	cmp	r2, r3
 8004484:	d203      	bcs.n	800448e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800448a:	b29b      	uxth	r3, r3
 800448c:	e002      	b.n	8004494 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004492:	b29b      	uxth	r3, r3
 8004494:	461a      	mov	r2, r3
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 ff38 	bl	800530e <USBD_CtlContinueRx>
 800449e:	e038      	b.n	8004512 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d105      	bne.n	80044c2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 ff35 	bl	8005332 <USBD_CtlSendStatus>
 80044c8:	e023      	b.n	8004512 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80044d0:	2b05      	cmp	r3, #5
 80044d2:	d11e      	bne.n	8004512 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80044dc:	2100      	movs	r1, #0
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f001 f9e6 	bl	80058b0 <USBD_LL_StallEP>
 80044e4:	e015      	b.n	8004512 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00d      	beq.n	800450e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d108      	bne.n	800450e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	7afa      	ldrb	r2, [r7, #11]
 8004506:	4611      	mov	r1, r2
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	4798      	blx	r3
 800450c:	e001      	b.n	8004512 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800450e:	2302      	movs	r3, #2
 8004510:	e000      	b.n	8004514 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	460b      	mov	r3, r1
 8004526:	607a      	str	r2, [r7, #4]
 8004528:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800452a:	7afb      	ldrb	r3, [r7, #11]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d17f      	bne.n	8004630 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	3314      	adds	r3, #20
 8004534:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800453c:	2b02      	cmp	r3, #2
 800453e:	d15c      	bne.n	80045fa <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	429a      	cmp	r2, r3
 800454a:	d915      	bls.n	8004578 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	1ad2      	subs	r2, r2, r3
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	b29b      	uxth	r3, r3
 8004560:	461a      	mov	r2, r3
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 fec0 	bl	80052ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800456a:	2300      	movs	r3, #0
 800456c:	2200      	movs	r2, #0
 800456e:	2100      	movs	r1, #0
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f001 fa42 	bl	80059fa <USBD_LL_PrepareReceive>
 8004576:	e04e      	b.n	8004616 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	6912      	ldr	r2, [r2, #16]
 8004580:	fbb3 f1f2 	udiv	r1, r3, r2
 8004584:	fb01 f202 	mul.w	r2, r1, r2
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d11c      	bne.n	80045c8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004596:	429a      	cmp	r2, r3
 8004598:	d316      	bcc.n	80045c8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	689a      	ldr	r2, [r3, #8]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d20f      	bcs.n	80045c8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80045a8:	2200      	movs	r2, #0
 80045aa:	2100      	movs	r1, #0
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 fe9c 	bl	80052ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80045ba:	2300      	movs	r3, #0
 80045bc:	2200      	movs	r2, #0
 80045be:	2100      	movs	r1, #0
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f001 fa1a 	bl	80059fa <USBD_LL_PrepareReceive>
 80045c6:	e026      	b.n	8004616 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80045da:	2b03      	cmp	r3, #3
 80045dc:	d105      	bne.n	80045ea <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80045ea:	2180      	movs	r1, #128	; 0x80
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f001 f95f 	bl	80058b0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 feb0 	bl	8005358 <USBD_CtlReceiveStatus>
 80045f8:	e00d      	b.n	8004616 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004600:	2b04      	cmp	r3, #4
 8004602:	d004      	beq.n	800460e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800460a:	2b00      	cmp	r3, #0
 800460c:	d103      	bne.n	8004616 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800460e:	2180      	movs	r1, #128	; 0x80
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f001 f94d 	bl	80058b0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800461c:	2b01      	cmp	r3, #1
 800461e:	d11d      	bne.n	800465c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f7ff fe81 	bl	8004328 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800462e:	e015      	b.n	800465c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00d      	beq.n	8004658 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004642:	2b03      	cmp	r3, #3
 8004644:	d108      	bne.n	8004658 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	7afa      	ldrb	r2, [r7, #11]
 8004650:	4611      	mov	r1, r2
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	4798      	blx	r3
 8004656:	e001      	b.n	800465c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004658:	2302      	movs	r3, #2
 800465a:	e000      	b.n	800465e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3718      	adds	r7, #24
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b082      	sub	sp, #8
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800466e:	2340      	movs	r3, #64	; 0x40
 8004670:	2200      	movs	r2, #0
 8004672:	2100      	movs	r1, #0
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f001 f8d6 	bl	8005826 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2240      	movs	r2, #64	; 0x40
 8004686:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800468a:	2340      	movs	r3, #64	; 0x40
 800468c:	2200      	movs	r2, #0
 800468e:	2180      	movs	r1, #128	; 0x80
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f001 f8c8 	bl	8005826 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2240      	movs	r2, #64	; 0x40
 80046a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d009      	beq.n	80046de <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6852      	ldr	r2, [r2, #4]
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	4611      	mov	r1, r2
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	4798      	blx	r3
  }

  return USBD_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	460b      	mov	r3, r1
 80046f2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	78fa      	ldrb	r2, [r7, #3]
 80046f8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr

08004706 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2204      	movs	r2, #4
 800471e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	bc80      	pop	{r7}
 800472c:	4770      	bx	lr

0800472e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800473c:	2b04      	cmp	r3, #4
 800473e:	d105      	bne.n	800474c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	bc80      	pop	{r7}
 8004756:	4770      	bx	lr

08004758 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004766:	2b03      	cmp	r3, #3
 8004768:	d10b      	bne.n	8004782 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d005      	beq.n	8004782 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80047a2:	2b40      	cmp	r3, #64	; 0x40
 80047a4:	d005      	beq.n	80047b2 <USBD_StdDevReq+0x26>
 80047a6:	2b40      	cmp	r3, #64	; 0x40
 80047a8:	d84f      	bhi.n	800484a <USBD_StdDevReq+0xbe>
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d009      	beq.n	80047c2 <USBD_StdDevReq+0x36>
 80047ae:	2b20      	cmp	r3, #32
 80047b0:	d14b      	bne.n	800484a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	6839      	ldr	r1, [r7, #0]
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	4798      	blx	r3
      break;
 80047c0:	e048      	b.n	8004854 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	785b      	ldrb	r3, [r3, #1]
 80047c6:	2b09      	cmp	r3, #9
 80047c8:	d839      	bhi.n	800483e <USBD_StdDevReq+0xb2>
 80047ca:	a201      	add	r2, pc, #4	; (adr r2, 80047d0 <USBD_StdDevReq+0x44>)
 80047cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d0:	08004821 	.word	0x08004821
 80047d4:	08004835 	.word	0x08004835
 80047d8:	0800483f 	.word	0x0800483f
 80047dc:	0800482b 	.word	0x0800482b
 80047e0:	0800483f 	.word	0x0800483f
 80047e4:	08004803 	.word	0x08004803
 80047e8:	080047f9 	.word	0x080047f9
 80047ec:	0800483f 	.word	0x0800483f
 80047f0:	08004817 	.word	0x08004817
 80047f4:	0800480d 	.word	0x0800480d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80047f8:	6839      	ldr	r1, [r7, #0]
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f9dc 	bl	8004bb8 <USBD_GetDescriptor>
          break;
 8004800:	e022      	b.n	8004848 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004802:	6839      	ldr	r1, [r7, #0]
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 fb3f 	bl	8004e88 <USBD_SetAddress>
          break;
 800480a:	e01d      	b.n	8004848 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800480c:	6839      	ldr	r1, [r7, #0]
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fb7e 	bl	8004f10 <USBD_SetConfig>
          break;
 8004814:	e018      	b.n	8004848 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004816:	6839      	ldr	r1, [r7, #0]
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 fc07 	bl	800502c <USBD_GetConfig>
          break;
 800481e:	e013      	b.n	8004848 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004820:	6839      	ldr	r1, [r7, #0]
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fc37 	bl	8005096 <USBD_GetStatus>
          break;
 8004828:	e00e      	b.n	8004848 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800482a:	6839      	ldr	r1, [r7, #0]
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 fc65 	bl	80050fc <USBD_SetFeature>
          break;
 8004832:	e009      	b.n	8004848 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004834:	6839      	ldr	r1, [r7, #0]
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fc74 	bl	8005124 <USBD_ClrFeature>
          break;
 800483c:	e004      	b.n	8004848 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800483e:	6839      	ldr	r1, [r7, #0]
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 fccc 	bl	80051de <USBD_CtlError>
          break;
 8004846:	bf00      	nop
      }
      break;
 8004848:	e004      	b.n	8004854 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800484a:	6839      	ldr	r1, [r7, #0]
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 fcc6 	bl	80051de <USBD_CtlError>
      break;
 8004852:	bf00      	nop
  }

  return ret;
 8004854:	7bfb      	ldrb	r3, [r7, #15]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop

08004860 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004876:	2b40      	cmp	r3, #64	; 0x40
 8004878:	d005      	beq.n	8004886 <USBD_StdItfReq+0x26>
 800487a:	2b40      	cmp	r3, #64	; 0x40
 800487c:	d82e      	bhi.n	80048dc <USBD_StdItfReq+0x7c>
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <USBD_StdItfReq+0x26>
 8004882:	2b20      	cmp	r3, #32
 8004884:	d12a      	bne.n	80048dc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800488c:	3b01      	subs	r3, #1
 800488e:	2b02      	cmp	r3, #2
 8004890:	d81d      	bhi.n	80048ce <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	889b      	ldrh	r3, [r3, #4]
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b01      	cmp	r3, #1
 800489a:	d813      	bhi.n	80048c4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	6839      	ldr	r1, [r7, #0]
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	4798      	blx	r3
 80048aa:	4603      	mov	r3, r0
 80048ac:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	88db      	ldrh	r3, [r3, #6]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d110      	bne.n	80048d8 <USBD_StdItfReq+0x78>
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10d      	bne.n	80048d8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fd38 	bl	8005332 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80048c2:	e009      	b.n	80048d8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80048c4:	6839      	ldr	r1, [r7, #0]
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 fc89 	bl	80051de <USBD_CtlError>
          break;
 80048cc:	e004      	b.n	80048d8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80048ce:	6839      	ldr	r1, [r7, #0]
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 fc84 	bl	80051de <USBD_CtlError>
          break;
 80048d6:	e000      	b.n	80048da <USBD_StdItfReq+0x7a>
          break;
 80048d8:	bf00      	nop
      }
      break;
 80048da:	e004      	b.n	80048e6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80048dc:	6839      	ldr	r1, [r7, #0]
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 fc7d 	bl	80051de <USBD_CtlError>
      break;
 80048e4:	bf00      	nop
  }

  return USBD_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	889b      	ldrh	r3, [r3, #4]
 8004902:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800490c:	2b40      	cmp	r3, #64	; 0x40
 800490e:	d007      	beq.n	8004920 <USBD_StdEPReq+0x30>
 8004910:	2b40      	cmp	r3, #64	; 0x40
 8004912:	f200 8146 	bhi.w	8004ba2 <USBD_StdEPReq+0x2b2>
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00a      	beq.n	8004930 <USBD_StdEPReq+0x40>
 800491a:	2b20      	cmp	r3, #32
 800491c:	f040 8141 	bne.w	8004ba2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	6839      	ldr	r1, [r7, #0]
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	4798      	blx	r3
      break;
 800492e:	e13d      	b.n	8004bac <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004938:	2b20      	cmp	r3, #32
 800493a:	d10a      	bne.n	8004952 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	6839      	ldr	r1, [r7, #0]
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	4798      	blx	r3
 800494a:	4603      	mov	r3, r0
 800494c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800494e:	7bfb      	ldrb	r3, [r7, #15]
 8004950:	e12d      	b.n	8004bae <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	785b      	ldrb	r3, [r3, #1]
 8004956:	2b03      	cmp	r3, #3
 8004958:	d007      	beq.n	800496a <USBD_StdEPReq+0x7a>
 800495a:	2b03      	cmp	r3, #3
 800495c:	f300 811b 	bgt.w	8004b96 <USBD_StdEPReq+0x2a6>
 8004960:	2b00      	cmp	r3, #0
 8004962:	d072      	beq.n	8004a4a <USBD_StdEPReq+0x15a>
 8004964:	2b01      	cmp	r3, #1
 8004966:	d03a      	beq.n	80049de <USBD_StdEPReq+0xee>
 8004968:	e115      	b.n	8004b96 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004970:	2b02      	cmp	r3, #2
 8004972:	d002      	beq.n	800497a <USBD_StdEPReq+0x8a>
 8004974:	2b03      	cmp	r3, #3
 8004976:	d015      	beq.n	80049a4 <USBD_StdEPReq+0xb4>
 8004978:	e02b      	b.n	80049d2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800497a:	7bbb      	ldrb	r3, [r7, #14]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00c      	beq.n	800499a <USBD_StdEPReq+0xaa>
 8004980:	7bbb      	ldrb	r3, [r7, #14]
 8004982:	2b80      	cmp	r3, #128	; 0x80
 8004984:	d009      	beq.n	800499a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004986:	7bbb      	ldrb	r3, [r7, #14]
 8004988:	4619      	mov	r1, r3
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 ff90 	bl	80058b0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004990:	2180      	movs	r1, #128	; 0x80
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 ff8c 	bl	80058b0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004998:	e020      	b.n	80049dc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800499a:	6839      	ldr	r1, [r7, #0]
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fc1e 	bl	80051de <USBD_CtlError>
              break;
 80049a2:	e01b      	b.n	80049dc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	885b      	ldrh	r3, [r3, #2]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10e      	bne.n	80049ca <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80049ac:	7bbb      	ldrb	r3, [r7, #14]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00b      	beq.n	80049ca <USBD_StdEPReq+0xda>
 80049b2:	7bbb      	ldrb	r3, [r7, #14]
 80049b4:	2b80      	cmp	r3, #128	; 0x80
 80049b6:	d008      	beq.n	80049ca <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	88db      	ldrh	r3, [r3, #6]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d104      	bne.n	80049ca <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80049c0:	7bbb      	ldrb	r3, [r7, #14]
 80049c2:	4619      	mov	r1, r3
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 ff73 	bl	80058b0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 fcb1 	bl	8005332 <USBD_CtlSendStatus>

              break;
 80049d0:	e004      	b.n	80049dc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80049d2:	6839      	ldr	r1, [r7, #0]
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 fc02 	bl	80051de <USBD_CtlError>
              break;
 80049da:	bf00      	nop
          }
          break;
 80049dc:	e0e0      	b.n	8004ba0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d002      	beq.n	80049ee <USBD_StdEPReq+0xfe>
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d015      	beq.n	8004a18 <USBD_StdEPReq+0x128>
 80049ec:	e026      	b.n	8004a3c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80049ee:	7bbb      	ldrb	r3, [r7, #14]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00c      	beq.n	8004a0e <USBD_StdEPReq+0x11e>
 80049f4:	7bbb      	ldrb	r3, [r7, #14]
 80049f6:	2b80      	cmp	r3, #128	; 0x80
 80049f8:	d009      	beq.n	8004a0e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80049fa:	7bbb      	ldrb	r3, [r7, #14]
 80049fc:	4619      	mov	r1, r3
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 ff56 	bl	80058b0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004a04:	2180      	movs	r1, #128	; 0x80
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 ff52 	bl	80058b0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004a0c:	e01c      	b.n	8004a48 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8004a0e:	6839      	ldr	r1, [r7, #0]
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 fbe4 	bl	80051de <USBD_CtlError>
              break;
 8004a16:	e017      	b.n	8004a48 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	885b      	ldrh	r3, [r3, #2]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d112      	bne.n	8004a46 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004a20:	7bbb      	ldrb	r3, [r7, #14]
 8004a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d004      	beq.n	8004a34 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004a2a:	7bbb      	ldrb	r3, [r7, #14]
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 ff5d 	bl	80058ee <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 fc7c 	bl	8005332 <USBD_CtlSendStatus>
              }
              break;
 8004a3a:	e004      	b.n	8004a46 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8004a3c:	6839      	ldr	r1, [r7, #0]
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fbcd 	bl	80051de <USBD_CtlError>
              break;
 8004a44:	e000      	b.n	8004a48 <USBD_StdEPReq+0x158>
              break;
 8004a46:	bf00      	nop
          }
          break;
 8004a48:	e0aa      	b.n	8004ba0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d002      	beq.n	8004a5a <USBD_StdEPReq+0x16a>
 8004a54:	2b03      	cmp	r3, #3
 8004a56:	d032      	beq.n	8004abe <USBD_StdEPReq+0x1ce>
 8004a58:	e097      	b.n	8004b8a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004a5a:	7bbb      	ldrb	r3, [r7, #14]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d007      	beq.n	8004a70 <USBD_StdEPReq+0x180>
 8004a60:	7bbb      	ldrb	r3, [r7, #14]
 8004a62:	2b80      	cmp	r3, #128	; 0x80
 8004a64:	d004      	beq.n	8004a70 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8004a66:	6839      	ldr	r1, [r7, #0]
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fbb8 	bl	80051de <USBD_CtlError>
                break;
 8004a6e:	e091      	b.n	8004b94 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004a70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	da0b      	bge.n	8004a90 <USBD_StdEPReq+0x1a0>
 8004a78:	7bbb      	ldrb	r3, [r7, #14]
 8004a7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	3310      	adds	r3, #16
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	e00b      	b.n	8004aa8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004a90:	7bbb      	ldrb	r3, [r7, #14]
 8004a92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004a96:	4613      	mov	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2200      	movs	r2, #0
 8004aae:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fbfb 	bl	80052b2 <USBD_CtlSendData>
              break;
 8004abc:	e06a      	b.n	8004b94 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8004abe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	da11      	bge.n	8004aea <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004ac6:	7bbb      	ldrb	r3, [r7, #14]
 8004ac8:	f003 020f 	and.w	r2, r3, #15
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	440b      	add	r3, r1
 8004ad8:	3318      	adds	r3, #24
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d117      	bne.n	8004b10 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8004ae0:	6839      	ldr	r1, [r7, #0]
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fb7b 	bl	80051de <USBD_CtlError>
                  break;
 8004ae8:	e054      	b.n	8004b94 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004aea:	7bbb      	ldrb	r3, [r7, #14]
 8004aec:	f003 020f 	and.w	r2, r3, #15
 8004af0:	6879      	ldr	r1, [r7, #4]
 8004af2:	4613      	mov	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	440b      	add	r3, r1
 8004afc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d104      	bne.n	8004b10 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8004b06:	6839      	ldr	r1, [r7, #0]
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fb68 	bl	80051de <USBD_CtlError>
                  break;
 8004b0e:	e041      	b.n	8004b94 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004b10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	da0b      	bge.n	8004b30 <USBD_StdEPReq+0x240>
 8004b18:	7bbb      	ldrb	r3, [r7, #14]
 8004b1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b1e:	4613      	mov	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	3310      	adds	r3, #16
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	e00b      	b.n	8004b48 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004b30:	7bbb      	ldrb	r3, [r7, #14]
 8004b32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004b36:	4613      	mov	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	4413      	add	r3, r2
 8004b46:	3304      	adds	r3, #4
 8004b48:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004b4a:	7bbb      	ldrb	r3, [r7, #14]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <USBD_StdEPReq+0x266>
 8004b50:	7bbb      	ldrb	r3, [r7, #14]
 8004b52:	2b80      	cmp	r3, #128	; 0x80
 8004b54:	d103      	bne.n	8004b5e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	e00e      	b.n	8004b7c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004b5e:	7bbb      	ldrb	r3, [r7, #14]
 8004b60:	4619      	mov	r1, r3
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fee2 	bl	800592c <USBD_LL_IsStallEP>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2201      	movs	r2, #1
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	e002      	b.n	8004b7c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	4619      	mov	r1, r3
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fb95 	bl	80052b2 <USBD_CtlSendData>
              break;
 8004b88:	e004      	b.n	8004b94 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8004b8a:	6839      	ldr	r1, [r7, #0]
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 fb26 	bl	80051de <USBD_CtlError>
              break;
 8004b92:	bf00      	nop
          }
          break;
 8004b94:	e004      	b.n	8004ba0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8004b96:	6839      	ldr	r1, [r7, #0]
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fb20 	bl	80051de <USBD_CtlError>
          break;
 8004b9e:	bf00      	nop
      }
      break;
 8004ba0:	e004      	b.n	8004bac <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8004ba2:	6839      	ldr	r1, [r7, #0]
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 fb1a 	bl	80051de <USBD_CtlError>
      break;
 8004baa:	bf00      	nop
  }

  return ret;
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
	...

08004bb8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	885b      	ldrh	r3, [r3, #2]
 8004bd2:	0a1b      	lsrs	r3, r3, #8
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	2b06      	cmp	r3, #6
 8004bda:	f200 8128 	bhi.w	8004e2e <USBD_GetDescriptor+0x276>
 8004bde:	a201      	add	r2, pc, #4	; (adr r2, 8004be4 <USBD_GetDescriptor+0x2c>)
 8004be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be4:	08004c01 	.word	0x08004c01
 8004be8:	08004c19 	.word	0x08004c19
 8004bec:	08004c59 	.word	0x08004c59
 8004bf0:	08004e2f 	.word	0x08004e2f
 8004bf4:	08004e2f 	.word	0x08004e2f
 8004bf8:	08004dcf 	.word	0x08004dcf
 8004bfc:	08004dfb 	.word	0x08004dfb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	7c12      	ldrb	r2, [r2, #16]
 8004c0c:	f107 0108 	add.w	r1, r7, #8
 8004c10:	4610      	mov	r0, r2
 8004c12:	4798      	blx	r3
 8004c14:	60f8      	str	r0, [r7, #12]
      break;
 8004c16:	e112      	b.n	8004e3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	7c1b      	ldrb	r3, [r3, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10d      	bne.n	8004c3c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c28:	f107 0208 	add.w	r2, r7, #8
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	4798      	blx	r3
 8004c30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	3301      	adds	r3, #1
 8004c36:	2202      	movs	r2, #2
 8004c38:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8004c3a:	e100      	b.n	8004e3e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	f107 0208 	add.w	r2, r7, #8
 8004c48:	4610      	mov	r0, r2
 8004c4a:	4798      	blx	r3
 8004c4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	3301      	adds	r3, #1
 8004c52:	2202      	movs	r2, #2
 8004c54:	701a      	strb	r2, [r3, #0]
      break;
 8004c56:	e0f2      	b.n	8004e3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	885b      	ldrh	r3, [r3, #2]
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b05      	cmp	r3, #5
 8004c60:	f200 80ac 	bhi.w	8004dbc <USBD_GetDescriptor+0x204>
 8004c64:	a201      	add	r2, pc, #4	; (adr r2, 8004c6c <USBD_GetDescriptor+0xb4>)
 8004c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6a:	bf00      	nop
 8004c6c:	08004c85 	.word	0x08004c85
 8004c70:	08004cb9 	.word	0x08004cb9
 8004c74:	08004ced 	.word	0x08004ced
 8004c78:	08004d21 	.word	0x08004d21
 8004c7c:	08004d55 	.word	0x08004d55
 8004c80:	08004d89 	.word	0x08004d89
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00b      	beq.n	8004ca8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	7c12      	ldrb	r2, [r2, #16]
 8004c9c:	f107 0108 	add.w	r1, r7, #8
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	4798      	blx	r3
 8004ca4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004ca6:	e091      	b.n	8004dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004ca8:	6839      	ldr	r1, [r7, #0]
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fa97 	bl	80051de <USBD_CtlError>
            err++;
 8004cb0:	7afb      	ldrb	r3, [r7, #11]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	72fb      	strb	r3, [r7, #11]
          break;
 8004cb6:	e089      	b.n	8004dcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00b      	beq.n	8004cdc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	7c12      	ldrb	r2, [r2, #16]
 8004cd0:	f107 0108 	add.w	r1, r7, #8
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	4798      	blx	r3
 8004cd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004cda:	e077      	b.n	8004dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004cdc:	6839      	ldr	r1, [r7, #0]
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fa7d 	bl	80051de <USBD_CtlError>
            err++;
 8004ce4:	7afb      	ldrb	r3, [r7, #11]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	72fb      	strb	r3, [r7, #11]
          break;
 8004cea:	e06f      	b.n	8004dcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00b      	beq.n	8004d10 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	7c12      	ldrb	r2, [r2, #16]
 8004d04:	f107 0108 	add.w	r1, r7, #8
 8004d08:	4610      	mov	r0, r2
 8004d0a:	4798      	blx	r3
 8004d0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004d0e:	e05d      	b.n	8004dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004d10:	6839      	ldr	r1, [r7, #0]
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fa63 	bl	80051de <USBD_CtlError>
            err++;
 8004d18:	7afb      	ldrb	r3, [r7, #11]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	72fb      	strb	r3, [r7, #11]
          break;
 8004d1e:	e055      	b.n	8004dcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00b      	beq.n	8004d44 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	7c12      	ldrb	r2, [r2, #16]
 8004d38:	f107 0108 	add.w	r1, r7, #8
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	4798      	blx	r3
 8004d40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004d42:	e043      	b.n	8004dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004d44:	6839      	ldr	r1, [r7, #0]
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 fa49 	bl	80051de <USBD_CtlError>
            err++;
 8004d4c:	7afb      	ldrb	r3, [r7, #11]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	72fb      	strb	r3, [r7, #11]
          break;
 8004d52:	e03b      	b.n	8004dcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00b      	beq.n	8004d78 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	7c12      	ldrb	r2, [r2, #16]
 8004d6c:	f107 0108 	add.w	r1, r7, #8
 8004d70:	4610      	mov	r0, r2
 8004d72:	4798      	blx	r3
 8004d74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004d76:	e029      	b.n	8004dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004d78:	6839      	ldr	r1, [r7, #0]
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 fa2f 	bl	80051de <USBD_CtlError>
            err++;
 8004d80:	7afb      	ldrb	r3, [r7, #11]
 8004d82:	3301      	adds	r3, #1
 8004d84:	72fb      	strb	r3, [r7, #11]
          break;
 8004d86:	e021      	b.n	8004dcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00b      	beq.n	8004dac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	7c12      	ldrb	r2, [r2, #16]
 8004da0:	f107 0108 	add.w	r1, r7, #8
 8004da4:	4610      	mov	r0, r2
 8004da6:	4798      	blx	r3
 8004da8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004daa:	e00f      	b.n	8004dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004dac:	6839      	ldr	r1, [r7, #0]
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fa15 	bl	80051de <USBD_CtlError>
            err++;
 8004db4:	7afb      	ldrb	r3, [r7, #11]
 8004db6:	3301      	adds	r3, #1
 8004db8:	72fb      	strb	r3, [r7, #11]
          break;
 8004dba:	e007      	b.n	8004dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8004dbc:	6839      	ldr	r1, [r7, #0]
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fa0d 	bl	80051de <USBD_CtlError>
          err++;
 8004dc4:	7afb      	ldrb	r3, [r7, #11]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8004dca:	e038      	b.n	8004e3e <USBD_GetDescriptor+0x286>
 8004dcc:	e037      	b.n	8004e3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	7c1b      	ldrb	r3, [r3, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d109      	bne.n	8004dea <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dde:	f107 0208 	add.w	r2, r7, #8
 8004de2:	4610      	mov	r0, r2
 8004de4:	4798      	blx	r3
 8004de6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004de8:	e029      	b.n	8004e3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004dea:	6839      	ldr	r1, [r7, #0]
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f9f6 	bl	80051de <USBD_CtlError>
        err++;
 8004df2:	7afb      	ldrb	r3, [r7, #11]
 8004df4:	3301      	adds	r3, #1
 8004df6:	72fb      	strb	r3, [r7, #11]
      break;
 8004df8:	e021      	b.n	8004e3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	7c1b      	ldrb	r3, [r3, #16]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10d      	bne.n	8004e1e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0a:	f107 0208 	add.w	r2, r7, #8
 8004e0e:	4610      	mov	r0, r2
 8004e10:	4798      	blx	r3
 8004e12:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	3301      	adds	r3, #1
 8004e18:	2207      	movs	r2, #7
 8004e1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004e1c:	e00f      	b.n	8004e3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004e1e:	6839      	ldr	r1, [r7, #0]
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 f9dc 	bl	80051de <USBD_CtlError>
        err++;
 8004e26:	7afb      	ldrb	r3, [r7, #11]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	72fb      	strb	r3, [r7, #11]
      break;
 8004e2c:	e007      	b.n	8004e3e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8004e2e:	6839      	ldr	r1, [r7, #0]
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f9d4 	bl	80051de <USBD_CtlError>
      err++;
 8004e36:	7afb      	ldrb	r3, [r7, #11]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	72fb      	strb	r3, [r7, #11]
      break;
 8004e3c:	bf00      	nop
  }

  if (err != 0U)
 8004e3e:	7afb      	ldrb	r3, [r7, #11]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d11c      	bne.n	8004e7e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8004e44:	893b      	ldrh	r3, [r7, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d011      	beq.n	8004e6e <USBD_GetDescriptor+0x2b6>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	88db      	ldrh	r3, [r3, #6]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00d      	beq.n	8004e6e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	88da      	ldrh	r2, [r3, #6]
 8004e56:	893b      	ldrh	r3, [r7, #8]
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	bf28      	it	cs
 8004e5c:	4613      	movcs	r3, r2
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004e62:	893b      	ldrh	r3, [r7, #8]
 8004e64:	461a      	mov	r2, r3
 8004e66:	68f9      	ldr	r1, [r7, #12]
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fa22 	bl	80052b2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	88db      	ldrh	r3, [r3, #6]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d104      	bne.n	8004e80 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 fa5b 	bl	8005332 <USBD_CtlSendStatus>
 8004e7c:	e000      	b.n	8004e80 <USBD_GetDescriptor+0x2c8>
    return;
 8004e7e:	bf00      	nop
    }
  }
}
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop

08004e88 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	889b      	ldrh	r3, [r3, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d130      	bne.n	8004efc <USBD_SetAddress+0x74>
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	88db      	ldrh	r3, [r3, #6]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d12c      	bne.n	8004efc <USBD_SetAddress+0x74>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	885b      	ldrh	r3, [r3, #2]
 8004ea6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ea8:	d828      	bhi.n	8004efc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	885b      	ldrh	r3, [r3, #2]
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	d104      	bne.n	8004eca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8004ec0:	6839      	ldr	r1, [r7, #0]
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f98b 	bl	80051de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ec8:	e01d      	b.n	8004f06 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	7bfa      	ldrb	r2, [r7, #15]
 8004ece:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fd4d 	bl	8005976 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 fa28 	bl	8005332 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d004      	beq.n	8004ef2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ef0:	e009      	b.n	8004f06 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004efa:	e004      	b.n	8004f06 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004efc:	6839      	ldr	r1, [r7, #0]
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f96d 	bl	80051de <USBD_CtlError>
  }
}
 8004f04:	bf00      	nop
 8004f06:	bf00      	nop
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
	...

08004f10 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	885b      	ldrh	r3, [r3, #2]
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	4b41      	ldr	r3, [pc, #260]	; (8005028 <USBD_SetConfig+0x118>)
 8004f22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004f24:	4b40      	ldr	r3, [pc, #256]	; (8005028 <USBD_SetConfig+0x118>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d904      	bls.n	8004f36 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8004f2c:	6839      	ldr	r1, [r7, #0]
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f955 	bl	80051de <USBD_CtlError>
 8004f34:	e075      	b.n	8005022 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d002      	beq.n	8004f46 <USBD_SetConfig+0x36>
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d023      	beq.n	8004f8c <USBD_SetConfig+0x7c>
 8004f44:	e062      	b.n	800500c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8004f46:	4b38      	ldr	r3, [pc, #224]	; (8005028 <USBD_SetConfig+0x118>)
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d01a      	beq.n	8004f84 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8004f4e:	4b36      	ldr	r3, [pc, #216]	; (8005028 <USBD_SetConfig+0x118>)
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	461a      	mov	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2203      	movs	r2, #3
 8004f5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004f60:	4b31      	ldr	r3, [pc, #196]	; (8005028 <USBD_SetConfig+0x118>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	4619      	mov	r1, r3
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7ff f9e8 	bl	800433c <USBD_SetClassConfig>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d104      	bne.n	8004f7c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8004f72:	6839      	ldr	r1, [r7, #0]
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f932 	bl	80051de <USBD_CtlError>
            return;
 8004f7a:	e052      	b.n	8005022 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f9d8 	bl	8005332 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004f82:	e04e      	b.n	8005022 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f9d4 	bl	8005332 <USBD_CtlSendStatus>
        break;
 8004f8a:	e04a      	b.n	8005022 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8004f8c:	4b26      	ldr	r3, [pc, #152]	; (8005028 <USBD_SetConfig+0x118>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d112      	bne.n	8004fba <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8004f9c:	4b22      	ldr	r3, [pc, #136]	; (8005028 <USBD_SetConfig+0x118>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004fa6:	4b20      	ldr	r3, [pc, #128]	; (8005028 <USBD_SetConfig+0x118>)
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	4619      	mov	r1, r3
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f7ff f9e4 	bl	800437a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f9bd 	bl	8005332 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004fb8:	e033      	b.n	8005022 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8004fba:	4b1b      	ldr	r3, [pc, #108]	; (8005028 <USBD_SetConfig+0x118>)
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d01d      	beq.n	8005004 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	4619      	mov	r1, r3
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7ff f9d2 	bl	800437a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004fd6:	4b14      	ldr	r3, [pc, #80]	; (8005028 <USBD_SetConfig+0x118>)
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004fe0:	4b11      	ldr	r3, [pc, #68]	; (8005028 <USBD_SetConfig+0x118>)
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7ff f9a8 	bl	800433c <USBD_SetClassConfig>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d104      	bne.n	8004ffc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8004ff2:	6839      	ldr	r1, [r7, #0]
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f8f2 	bl	80051de <USBD_CtlError>
            return;
 8004ffa:	e012      	b.n	8005022 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 f998 	bl	8005332 <USBD_CtlSendStatus>
        break;
 8005002:	e00e      	b.n	8005022 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f994 	bl	8005332 <USBD_CtlSendStatus>
        break;
 800500a:	e00a      	b.n	8005022 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800500c:	6839      	ldr	r1, [r7, #0]
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f8e5 	bl	80051de <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005014:	4b04      	ldr	r3, [pc, #16]	; (8005028 <USBD_SetConfig+0x118>)
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	4619      	mov	r1, r3
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7ff f9ad 	bl	800437a <USBD_ClrClassConfig>
        break;
 8005020:	bf00      	nop
    }
  }
}
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	200001cc 	.word	0x200001cc

0800502c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	88db      	ldrh	r3, [r3, #6]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d004      	beq.n	8005048 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800503e:	6839      	ldr	r1, [r7, #0]
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f8cc 	bl	80051de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005046:	e022      	b.n	800508e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800504e:	2b02      	cmp	r3, #2
 8005050:	dc02      	bgt.n	8005058 <USBD_GetConfig+0x2c>
 8005052:	2b00      	cmp	r3, #0
 8005054:	dc03      	bgt.n	800505e <USBD_GetConfig+0x32>
 8005056:	e015      	b.n	8005084 <USBD_GetConfig+0x58>
 8005058:	2b03      	cmp	r3, #3
 800505a:	d00b      	beq.n	8005074 <USBD_GetConfig+0x48>
 800505c:	e012      	b.n	8005084 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	3308      	adds	r3, #8
 8005068:	2201      	movs	r2, #1
 800506a:	4619      	mov	r1, r3
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f920 	bl	80052b2 <USBD_CtlSendData>
        break;
 8005072:	e00c      	b.n	800508e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3304      	adds	r3, #4
 8005078:	2201      	movs	r2, #1
 800507a:	4619      	mov	r1, r3
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f918 	bl	80052b2 <USBD_CtlSendData>
        break;
 8005082:	e004      	b.n	800508e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8005084:	6839      	ldr	r1, [r7, #0]
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f8a9 	bl	80051de <USBD_CtlError>
        break;
 800508c:	bf00      	nop
}
 800508e:	bf00      	nop
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b082      	sub	sp, #8
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050a6:	3b01      	subs	r3, #1
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d81e      	bhi.n	80050ea <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	88db      	ldrh	r3, [r3, #6]
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d004      	beq.n	80050be <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80050b4:	6839      	ldr	r1, [r7, #0]
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f891 	bl	80051de <USBD_CtlError>
        break;
 80050bc:	e01a      	b.n	80050f4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d005      	beq.n	80050da <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f043 0202 	orr.w	r2, r3, #2
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	330c      	adds	r3, #12
 80050de:	2202      	movs	r2, #2
 80050e0:	4619      	mov	r1, r3
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f8e5 	bl	80052b2 <USBD_CtlSendData>
      break;
 80050e8:	e004      	b.n	80050f4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80050ea:	6839      	ldr	r1, [r7, #0]
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f876 	bl	80051de <USBD_CtlError>
      break;
 80050f2:	bf00      	nop
  }
}
 80050f4:	bf00      	nop
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	885b      	ldrh	r3, [r3, #2]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d106      	bne.n	800511c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f90b 	bl	8005332 <USBD_CtlSendStatus>
  }
}
 800511c:	bf00      	nop
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005134:	3b01      	subs	r3, #1
 8005136:	2b02      	cmp	r3, #2
 8005138:	d80b      	bhi.n	8005152 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	885b      	ldrh	r3, [r3, #2]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d10c      	bne.n	800515c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f8f1 	bl	8005332 <USBD_CtlSendStatus>
      }
      break;
 8005150:	e004      	b.n	800515c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005152:	6839      	ldr	r1, [r7, #0]
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f842 	bl	80051de <USBD_CtlError>
      break;
 800515a:	e000      	b.n	800515e <USBD_ClrFeature+0x3a>
      break;
 800515c:	bf00      	nop
  }
}
 800515e:	bf00      	nop
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	781a      	ldrb	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	785a      	ldrb	r2, [r3, #1]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	3302      	adds	r3, #2
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	b29a      	uxth	r2, r3
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	3303      	adds	r3, #3
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	b29b      	uxth	r3, r3
 8005190:	021b      	lsls	r3, r3, #8
 8005192:	b29b      	uxth	r3, r3
 8005194:	4413      	add	r3, r2
 8005196:	b29a      	uxth	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	3304      	adds	r3, #4
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	3305      	adds	r3, #5
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	021b      	lsls	r3, r3, #8
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	4413      	add	r3, r2
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	3306      	adds	r3, #6
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	b29a      	uxth	r2, r3
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	3307      	adds	r3, #7
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	021b      	lsls	r3, r3, #8
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	4413      	add	r3, r2
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	80da      	strh	r2, [r3, #6]

}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc80      	pop	{r7}
 80051dc:	4770      	bx	lr

080051de <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
 80051e6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80051e8:	2180      	movs	r1, #128	; 0x80
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fb60 	bl	80058b0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80051f0:	2100      	movs	r1, #0
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fb5c 	bl	80058b0 <USBD_LL_StallEP>
}
 80051f8:	bf00      	nop
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d032      	beq.n	800527c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 f834 	bl	8005284 <USBD_GetLen>
 800521c:	4603      	mov	r3, r0
 800521e:	3301      	adds	r3, #1
 8005220:	b29b      	uxth	r3, r3
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800522a:	7dfb      	ldrb	r3, [r7, #23]
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	75fa      	strb	r2, [r7, #23]
 8005230:	461a      	mov	r2, r3
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	4413      	add	r3, r2
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	7812      	ldrb	r2, [r2, #0]
 800523a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800523c:	7dfb      	ldrb	r3, [r7, #23]
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	75fa      	strb	r2, [r7, #23]
 8005242:	461a      	mov	r2, r3
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4413      	add	r3, r2
 8005248:	2203      	movs	r2, #3
 800524a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800524c:	e012      	b.n	8005274 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	60fa      	str	r2, [r7, #12]
 8005254:	7dfa      	ldrb	r2, [r7, #23]
 8005256:	1c51      	adds	r1, r2, #1
 8005258:	75f9      	strb	r1, [r7, #23]
 800525a:	4611      	mov	r1, r2
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	440a      	add	r2, r1
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005264:	7dfb      	ldrb	r3, [r7, #23]
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	75fa      	strb	r2, [r7, #23]
 800526a:	461a      	mov	r2, r3
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	4413      	add	r3, r2
 8005270:	2200      	movs	r2, #0
 8005272:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1e8      	bne.n	800524e <USBD_GetString+0x4e>
    }
  }
}
 800527c:	bf00      	nop
 800527e:	3718      	adds	r7, #24
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8005290:	e005      	b.n	800529e <USBD_GetLen+0x1a>
  {
    len++;
 8005292:	7bfb      	ldrb	r3, [r7, #15]
 8005294:	3301      	adds	r3, #1
 8005296:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3301      	adds	r3, #1
 800529c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1f5      	bne.n	8005292 <USBD_GetLen+0xe>
  }

  return len;
 80052a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bc80      	pop	{r7}
 80052b0:	4770      	bx	lr

080052b2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b084      	sub	sp, #16
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	60f8      	str	r0, [r7, #12]
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	4613      	mov	r3, r2
 80052be:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80052c8:	88fa      	ldrh	r2, [r7, #6]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80052ce:	88fa      	ldrh	r2, [r7, #6]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80052d4:	88fb      	ldrh	r3, [r7, #6]
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	2100      	movs	r1, #0
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 fb6a 	bl	80059b4 <USBD_LL_Transmit>

  return USBD_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b084      	sub	sp, #16
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	60f8      	str	r0, [r7, #12]
 80052f2:	60b9      	str	r1, [r7, #8]
 80052f4:	4613      	mov	r3, r2
 80052f6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80052f8:	88fb      	ldrh	r3, [r7, #6]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	2100      	movs	r1, #0
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 fb58 	bl	80059b4 <USBD_LL_Transmit>

  return USBD_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	60b9      	str	r1, [r7, #8]
 8005318:	4613      	mov	r3, r2
 800531a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800531c:	88fb      	ldrh	r3, [r7, #6]
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	2100      	movs	r1, #0
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 fb69 	bl	80059fa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b082      	sub	sp, #8
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2204      	movs	r2, #4
 800533e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005342:	2300      	movs	r3, #0
 8005344:	2200      	movs	r2, #0
 8005346:	2100      	movs	r1, #0
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 fb33 	bl	80059b4 <USBD_LL_Transmit>

  return USBD_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2205      	movs	r2, #5
 8005364:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005368:	2300      	movs	r3, #0
 800536a:	2200      	movs	r2, #0
 800536c:	2100      	movs	r1, #0
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fb43 	bl	80059fa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
	...

08005380 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005384:	2200      	movs	r2, #0
 8005386:	490e      	ldr	r1, [pc, #56]	; (80053c0 <MX_USB_DEVICE_Init+0x40>)
 8005388:	480e      	ldr	r0, [pc, #56]	; (80053c4 <MX_USB_DEVICE_Init+0x44>)
 800538a:	f7fe ff7d 	bl	8004288 <USBD_Init>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005394:	f7fb f904 	bl	80005a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8005398:	490b      	ldr	r1, [pc, #44]	; (80053c8 <MX_USB_DEVICE_Init+0x48>)
 800539a:	480a      	ldr	r0, [pc, #40]	; (80053c4 <MX_USB_DEVICE_Init+0x44>)
 800539c:	f7fe ff9f 	bl	80042de <USBD_RegisterClass>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80053a6:	f7fb f8fb 	bl	80005a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80053aa:	4806      	ldr	r0, [pc, #24]	; (80053c4 <MX_USB_DEVICE_Init+0x44>)
 80053ac:	f7fe ffb0 	bl	8004310 <USBD_Start>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80053b6:	f7fb f8f3 	bl	80005a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80053ba:	bf00      	nop
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	20000114 	.word	0x20000114
 80053c4:	200001d0 	.word	0x200001d0
 80053c8:	2000000c 	.word	0x2000000c

080053cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	4603      	mov	r3, r0
 80053d4:	6039      	str	r1, [r7, #0]
 80053d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	2212      	movs	r2, #18
 80053dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80053de:	4b03      	ldr	r3, [pc, #12]	; (80053ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	20000130 	.word	0x20000130

080053f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	4603      	mov	r3, r0
 80053f8:	6039      	str	r1, [r7, #0]
 80053fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	2204      	movs	r2, #4
 8005400:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005402:	4b03      	ldr	r3, [pc, #12]	; (8005410 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005404:	4618      	mov	r0, r3
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	bc80      	pop	{r7}
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	20000144 	.word	0x20000144

08005414 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	4603      	mov	r3, r0
 800541c:	6039      	str	r1, [r7, #0]
 800541e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005420:	79fb      	ldrb	r3, [r7, #7]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d105      	bne.n	8005432 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	4907      	ldr	r1, [pc, #28]	; (8005448 <USBD_FS_ProductStrDescriptor+0x34>)
 800542a:	4808      	ldr	r0, [pc, #32]	; (800544c <USBD_FS_ProductStrDescriptor+0x38>)
 800542c:	f7ff fee8 	bl	8005200 <USBD_GetString>
 8005430:	e004      	b.n	800543c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	4904      	ldr	r1, [pc, #16]	; (8005448 <USBD_FS_ProductStrDescriptor+0x34>)
 8005436:	4805      	ldr	r0, [pc, #20]	; (800544c <USBD_FS_ProductStrDescriptor+0x38>)
 8005438:	f7ff fee2 	bl	8005200 <USBD_GetString>
  }
  return USBD_StrDesc;
 800543c:	4b02      	ldr	r3, [pc, #8]	; (8005448 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800543e:	4618      	mov	r0, r3
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20000494 	.word	0x20000494
 800544c:	08005b58 	.word	0x08005b58

08005450 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	4603      	mov	r3, r0
 8005458:	6039      	str	r1, [r7, #0]
 800545a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	4904      	ldr	r1, [pc, #16]	; (8005470 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005460:	4804      	ldr	r0, [pc, #16]	; (8005474 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005462:	f7ff fecd 	bl	8005200 <USBD_GetString>
  return USBD_StrDesc;
 8005466:	4b02      	ldr	r3, [pc, #8]	; (8005470 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005468:	4618      	mov	r0, r3
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	20000494 	.word	0x20000494
 8005474:	08005b78 	.word	0x08005b78

08005478 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	4603      	mov	r3, r0
 8005480:	6039      	str	r1, [r7, #0]
 8005482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	221a      	movs	r2, #26
 8005488:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800548a:	f000 f843 	bl	8005514 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800548e:	4b02      	ldr	r3, [pc, #8]	; (8005498 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005490:	4618      	mov	r0, r3
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	20000148 	.word	0x20000148

0800549c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	4603      	mov	r3, r0
 80054a4:	6039      	str	r1, [r7, #0]
 80054a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80054a8:	79fb      	ldrb	r3, [r7, #7]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d105      	bne.n	80054ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	4907      	ldr	r1, [pc, #28]	; (80054d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80054b2:	4808      	ldr	r0, [pc, #32]	; (80054d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80054b4:	f7ff fea4 	bl	8005200 <USBD_GetString>
 80054b8:	e004      	b.n	80054c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	4904      	ldr	r1, [pc, #16]	; (80054d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80054be:	4805      	ldr	r0, [pc, #20]	; (80054d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80054c0:	f7ff fe9e 	bl	8005200 <USBD_GetString>
  }
  return USBD_StrDesc;
 80054c4:	4b02      	ldr	r3, [pc, #8]	; (80054d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	20000494 	.word	0x20000494
 80054d4:	08005b84 	.word	0x08005b84

080054d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	4603      	mov	r3, r0
 80054e0:	6039      	str	r1, [r7, #0]
 80054e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80054e4:	79fb      	ldrb	r3, [r7, #7]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d105      	bne.n	80054f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	4907      	ldr	r1, [pc, #28]	; (800550c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80054ee:	4808      	ldr	r0, [pc, #32]	; (8005510 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80054f0:	f7ff fe86 	bl	8005200 <USBD_GetString>
 80054f4:	e004      	b.n	8005500 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	4904      	ldr	r1, [pc, #16]	; (800550c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80054fa:	4805      	ldr	r0, [pc, #20]	; (8005510 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80054fc:	f7ff fe80 	bl	8005200 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005500:	4b02      	ldr	r3, [pc, #8]	; (800550c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005502:	4618      	mov	r0, r3
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20000494 	.word	0x20000494
 8005510:	08005b90 	.word	0x08005b90

08005514 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800551a:	4b0f      	ldr	r3, [pc, #60]	; (8005558 <Get_SerialNum+0x44>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005520:	4b0e      	ldr	r3, [pc, #56]	; (800555c <Get_SerialNum+0x48>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005526:	4b0e      	ldr	r3, [pc, #56]	; (8005560 <Get_SerialNum+0x4c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4413      	add	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d009      	beq.n	800554e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800553a:	2208      	movs	r2, #8
 800553c:	4909      	ldr	r1, [pc, #36]	; (8005564 <Get_SerialNum+0x50>)
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f000 f814 	bl	800556c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005544:	2204      	movs	r2, #4
 8005546:	4908      	ldr	r1, [pc, #32]	; (8005568 <Get_SerialNum+0x54>)
 8005548:	68b8      	ldr	r0, [r7, #8]
 800554a:	f000 f80f 	bl	800556c <IntToUnicode>
  }
}
 800554e:	bf00      	nop
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	1ffff7e8 	.word	0x1ffff7e8
 800555c:	1ffff7ec 	.word	0x1ffff7ec
 8005560:	1ffff7f0 	.word	0x1ffff7f0
 8005564:	2000014a 	.word	0x2000014a
 8005568:	2000015a 	.word	0x2000015a

0800556c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800556c:	b480      	push	{r7}
 800556e:	b087      	sub	sp, #28
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	4613      	mov	r3, r2
 8005578:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800557a:	2300      	movs	r3, #0
 800557c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800557e:	2300      	movs	r3, #0
 8005580:	75fb      	strb	r3, [r7, #23]
 8005582:	e027      	b.n	80055d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	0f1b      	lsrs	r3, r3, #28
 8005588:	2b09      	cmp	r3, #9
 800558a:	d80b      	bhi.n	80055a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	0f1b      	lsrs	r3, r3, #28
 8005590:	b2da      	uxtb	r2, r3
 8005592:	7dfb      	ldrb	r3, [r7, #23]
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	4619      	mov	r1, r3
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	440b      	add	r3, r1
 800559c:	3230      	adds	r2, #48	; 0x30
 800559e:	b2d2      	uxtb	r2, r2
 80055a0:	701a      	strb	r2, [r3, #0]
 80055a2:	e00a      	b.n	80055ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	0f1b      	lsrs	r3, r3, #28
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	7dfb      	ldrb	r3, [r7, #23]
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	4619      	mov	r1, r3
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	440b      	add	r3, r1
 80055b4:	3237      	adds	r2, #55	; 0x37
 80055b6:	b2d2      	uxtb	r2, r2
 80055b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80055c0:	7dfb      	ldrb	r3, [r7, #23]
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	3301      	adds	r3, #1
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	4413      	add	r3, r2
 80055ca:	2200      	movs	r2, #0
 80055cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80055ce:	7dfb      	ldrb	r3, [r7, #23]
 80055d0:	3301      	adds	r3, #1
 80055d2:	75fb      	strb	r3, [r7, #23]
 80055d4:	7dfa      	ldrb	r2, [r7, #23]
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d3d3      	bcc.n	8005584 <IntToUnicode+0x18>
  }
}
 80055dc:	bf00      	nop
 80055de:	bf00      	nop
 80055e0:	371c      	adds	r7, #28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bc80      	pop	{r7}
 80055e6:	4770      	bx	lr

080055e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a0d      	ldr	r2, [pc, #52]	; (800562c <HAL_PCD_MspInit+0x44>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d113      	bne.n	8005622 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80055fa:	4b0d      	ldr	r3, [pc, #52]	; (8005630 <HAL_PCD_MspInit+0x48>)
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	4a0c      	ldr	r2, [pc, #48]	; (8005630 <HAL_PCD_MspInit+0x48>)
 8005600:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005604:	61d3      	str	r3, [r2, #28]
 8005606:	4b0a      	ldr	r3, [pc, #40]	; (8005630 <HAL_PCD_MspInit+0x48>)
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005612:	2200      	movs	r2, #0
 8005614:	2100      	movs	r1, #0
 8005616:	2014      	movs	r0, #20
 8005618:	f7fb fa3d 	bl	8000a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800561c:	2014      	movs	r0, #20
 800561e:	f7fb fa56 	bl	8000ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005622:	bf00      	nop
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	40005c00 	.word	0x40005c00
 8005630:	40021000 	.word	0x40021000

08005634 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8005648:	4619      	mov	r1, r3
 800564a:	4610      	mov	r0, r2
 800564c:	f7fe fea8 	bl	80043a0 <USBD_LL_SetupStage>
}
 8005650:	bf00      	nop
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	460b      	mov	r3, r1
 8005662:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800566a:	78fb      	ldrb	r3, [r7, #3]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	015b      	lsls	r3, r3, #5
 8005670:	4413      	add	r3, r2
 8005672:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	78fb      	ldrb	r3, [r7, #3]
 800567a:	4619      	mov	r1, r3
 800567c:	f7fe fedd 	bl	800443a <USBD_LL_DataOutStage>
}
 8005680:	bf00      	nop
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	460b      	mov	r3, r1
 8005692:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800569a:	78fb      	ldrb	r3, [r7, #3]
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	015b      	lsls	r3, r3, #5
 80056a0:	4413      	add	r3, r2
 80056a2:	333c      	adds	r3, #60	; 0x3c
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	78fb      	ldrb	r3, [r7, #3]
 80056a8:	4619      	mov	r1, r3
 80056aa:	f7fe ff37 	bl	800451c <USBD_LL_DataInStage>
}
 80056ae:	bf00      	nop
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b082      	sub	sp, #8
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7ff f847 	bl	8004758 <USBD_LL_SOF>
}
 80056ca:	bf00      	nop
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b084      	sub	sp, #16
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80056da:	2301      	movs	r3, #1
 80056dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d001      	beq.n	80056ea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80056e6:	f7fa ff5b 	bl	80005a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80056f0:	7bfa      	ldrb	r2, [r7, #15]
 80056f2:	4611      	mov	r1, r2
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7fe fff7 	bl	80046e8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005700:	4618      	mov	r0, r3
 8005702:	f7fe ffb0 	bl	8004666 <USBD_LL_Reset>
}
 8005706:	bf00      	nop
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
	...

08005710 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800571e:	4618      	mov	r0, r3
 8005720:	f7fe fff1 	bl	8004706 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d005      	beq.n	8005738 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800572c:	4b04      	ldr	r3, [pc, #16]	; (8005740 <HAL_PCD_SuspendCallback+0x30>)
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	4a03      	ldr	r2, [pc, #12]	; (8005740 <HAL_PCD_SuspendCallback+0x30>)
 8005732:	f043 0306 	orr.w	r3, r3, #6
 8005736:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005738:	bf00      	nop
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	e000ed00 	.word	0xe000ed00

08005744 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005752:	4618      	mov	r0, r3
 8005754:	f7fe ffeb 	bl	800472e <USBD_LL_Resume>
}
 8005758:	bf00      	nop
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8005768:	4a1f      	ldr	r2, [pc, #124]	; (80057e8 <USBD_LL_Init+0x88>)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a1d      	ldr	r2, [pc, #116]	; (80057e8 <USBD_LL_Init+0x88>)
 8005774:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8005778:	4b1b      	ldr	r3, [pc, #108]	; (80057e8 <USBD_LL_Init+0x88>)
 800577a:	4a1c      	ldr	r2, [pc, #112]	; (80057ec <USBD_LL_Init+0x8c>)
 800577c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800577e:	4b1a      	ldr	r3, [pc, #104]	; (80057e8 <USBD_LL_Init+0x88>)
 8005780:	2208      	movs	r2, #8
 8005782:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005784:	4b18      	ldr	r3, [pc, #96]	; (80057e8 <USBD_LL_Init+0x88>)
 8005786:	2202      	movs	r2, #2
 8005788:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800578a:	4b17      	ldr	r3, [pc, #92]	; (80057e8 <USBD_LL_Init+0x88>)
 800578c:	2200      	movs	r2, #0
 800578e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005790:	4b15      	ldr	r3, [pc, #84]	; (80057e8 <USBD_LL_Init+0x88>)
 8005792:	2200      	movs	r2, #0
 8005794:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005796:	4b14      	ldr	r3, [pc, #80]	; (80057e8 <USBD_LL_Init+0x88>)
 8005798:	2200      	movs	r2, #0
 800579a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800579c:	4812      	ldr	r0, [pc, #72]	; (80057e8 <USBD_LL_Init+0x88>)
 800579e:	f7fb fb64 	bl	8000e6a <HAL_PCD_Init>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80057a8:	f7fa fefa 	bl	80005a0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80057b2:	2318      	movs	r3, #24
 80057b4:	2200      	movs	r2, #0
 80057b6:	2100      	movs	r1, #0
 80057b8:	f7fc f9ea 	bl	8001b90 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80057c2:	2358      	movs	r3, #88	; 0x58
 80057c4:	2200      	movs	r2, #0
 80057c6:	2180      	movs	r1, #128	; 0x80
 80057c8:	f7fc f9e2 	bl	8001b90 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80057d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057d6:	2200      	movs	r2, #0
 80057d8:	2181      	movs	r1, #129	; 0x81
 80057da:	f7fc f9d9 	bl	8001b90 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	20000694 	.word	0x20000694
 80057ec:	40005c00 	.word	0x40005c00

080057f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80057f8:	2300      	movs	r3, #0
 80057fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005806:	4618      	mov	r0, r3
 8005808:	f7fb fc10 	bl	800102c <HAL_PCD_Start>
 800580c:	4603      	mov	r3, r0
 800580e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005810:	7bfb      	ldrb	r3, [r7, #15]
 8005812:	4618      	mov	r0, r3
 8005814:	f000 f934 	bl	8005a80 <USBD_Get_USB_Status>
 8005818:	4603      	mov	r3, r0
 800581a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800581c:	7bbb      	ldrb	r3, [r7, #14]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b084      	sub	sp, #16
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
 800582e:	4608      	mov	r0, r1
 8005830:	4611      	mov	r1, r2
 8005832:	461a      	mov	r2, r3
 8005834:	4603      	mov	r3, r0
 8005836:	70fb      	strb	r3, [r7, #3]
 8005838:	460b      	mov	r3, r1
 800583a:	70bb      	strb	r3, [r7, #2]
 800583c:	4613      	mov	r3, r2
 800583e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005844:	2300      	movs	r3, #0
 8005846:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800584e:	78bb      	ldrb	r3, [r7, #2]
 8005850:	883a      	ldrh	r2, [r7, #0]
 8005852:	78f9      	ldrb	r1, [r7, #3]
 8005854:	f7fb fd43 	bl	80012de <HAL_PCD_EP_Open>
 8005858:	4603      	mov	r3, r0
 800585a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800585c:	7bfb      	ldrb	r3, [r7, #15]
 800585e:	4618      	mov	r0, r3
 8005860:	f000 f90e 	bl	8005a80 <USBD_Get_USB_Status>
 8005864:	4603      	mov	r3, r0
 8005866:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005868:	7bbb      	ldrb	r3, [r7, #14]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b084      	sub	sp, #16
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	460b      	mov	r3, r1
 800587c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800587e:	2300      	movs	r3, #0
 8005880:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800588c:	78fa      	ldrb	r2, [r7, #3]
 800588e:	4611      	mov	r1, r2
 8005890:	4618      	mov	r0, r3
 8005892:	f7fb fd84 	bl	800139e <HAL_PCD_EP_Close>
 8005896:	4603      	mov	r3, r0
 8005898:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800589a:	7bfb      	ldrb	r3, [r7, #15]
 800589c:	4618      	mov	r0, r3
 800589e:	f000 f8ef 	bl	8005a80 <USBD_Get_USB_Status>
 80058a2:	4603      	mov	r3, r0
 80058a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80058a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	460b      	mov	r3, r1
 80058ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80058bc:	2300      	movs	r3, #0
 80058be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80058c0:	2300      	movs	r3, #0
 80058c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058ca:	78fa      	ldrb	r2, [r7, #3]
 80058cc:	4611      	mov	r1, r2
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fb fe1a 	bl	8001508 <HAL_PCD_EP_SetStall>
 80058d4:	4603      	mov	r3, r0
 80058d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 f8d0 	bl	8005a80 <USBD_Get_USB_Status>
 80058e0:	4603      	mov	r3, r0
 80058e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80058e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b084      	sub	sp, #16
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	460b      	mov	r3, r1
 80058f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80058fe:	2300      	movs	r3, #0
 8005900:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005908:	78fa      	ldrb	r2, [r7, #3]
 800590a:	4611      	mov	r1, r2
 800590c:	4618      	mov	r0, r3
 800590e:	f7fb fe55 	bl	80015bc <HAL_PCD_EP_ClrStall>
 8005912:	4603      	mov	r3, r0
 8005914:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005916:	7bfb      	ldrb	r3, [r7, #15]
 8005918:	4618      	mov	r0, r3
 800591a:	f000 f8b1 	bl	8005a80 <USBD_Get_USB_Status>
 800591e:	4603      	mov	r3, r0
 8005920:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005922:	7bbb      	ldrb	r3, [r7, #14]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	460b      	mov	r3, r1
 8005936:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800593e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8005940:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005944:	2b00      	cmp	r3, #0
 8005946:	da08      	bge.n	800595a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005948:	78fb      	ldrb	r3, [r7, #3]
 800594a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	015b      	lsls	r3, r3, #5
 8005952:	4413      	add	r3, r2
 8005954:	332a      	adds	r3, #42	; 0x2a
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	e008      	b.n	800596c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800595a:	78fb      	ldrb	r3, [r7, #3]
 800595c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	015b      	lsls	r3, r3, #5
 8005964:	4413      	add	r3, r2
 8005966:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800596a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800596c:	4618      	mov	r0, r3
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	bc80      	pop	{r7}
 8005974:	4770      	bx	lr

08005976 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b084      	sub	sp, #16
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	460b      	mov	r3, r1
 8005980:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005990:	78fa      	ldrb	r2, [r7, #3]
 8005992:	4611      	mov	r1, r2
 8005994:	4618      	mov	r0, r3
 8005996:	f7fb fc7d 	bl	8001294 <HAL_PCD_SetAddress>
 800599a:	4603      	mov	r3, r0
 800599c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	4618      	mov	r0, r3
 80059a2:	f000 f86d 	bl	8005a80 <USBD_Get_USB_Status>
 80059a6:	4603      	mov	r3, r0
 80059a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80059aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	607a      	str	r2, [r7, #4]
 80059be:	461a      	mov	r2, r3
 80059c0:	460b      	mov	r3, r1
 80059c2:	72fb      	strb	r3, [r7, #11]
 80059c4:	4613      	mov	r3, r2
 80059c6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80059c8:	2300      	movs	r3, #0
 80059ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80059d6:	893b      	ldrh	r3, [r7, #8]
 80059d8:	7af9      	ldrb	r1, [r7, #11]
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	f7fb fd5b 	bl	8001496 <HAL_PCD_EP_Transmit>
 80059e0:	4603      	mov	r3, r0
 80059e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80059e4:	7dfb      	ldrb	r3, [r7, #23]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 f84a 	bl	8005a80 <USBD_Get_USB_Status>
 80059ec:	4603      	mov	r3, r0
 80059ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80059f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b086      	sub	sp, #24
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	60f8      	str	r0, [r7, #12]
 8005a02:	607a      	str	r2, [r7, #4]
 8005a04:	461a      	mov	r2, r3
 8005a06:	460b      	mov	r3, r1
 8005a08:	72fb      	strb	r3, [r7, #11]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a12:	2300      	movs	r3, #0
 8005a14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005a1c:	893b      	ldrh	r3, [r7, #8]
 8005a1e:	7af9      	ldrb	r1, [r7, #11]
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	f7fb fcfe 	bl	8001422 <HAL_PCD_EP_Receive>
 8005a26:	4603      	mov	r3, r0
 8005a28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005a2a:	7dfb      	ldrb	r3, [r7, #23]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 f827 	bl	8005a80 <USBD_Get_USB_Status>
 8005a32:	4603      	mov	r3, r0
 8005a34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8005a36:	7dbb      	ldrb	r3, [r7, #22]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3718      	adds	r7, #24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8005a48:	4b02      	ldr	r3, [pc, #8]	; (8005a54 <USBD_static_malloc+0x14>)
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bc80      	pop	{r7}
 8005a52:	4770      	bx	lr
 8005a54:	20000900 	.word	0x20000900

08005a58 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]

}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bc80      	pop	{r7}
 8005a68:	4770      	bx	lr

08005a6a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
 8005a72:	460b      	mov	r3, r1
 8005a74:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8005a76:	bf00      	nop
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bc80      	pop	{r7}
 8005a7e:	4770      	bx	lr

08005a80 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	4603      	mov	r3, r0
 8005a88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005a8e:	79fb      	ldrb	r3, [r7, #7]
 8005a90:	2b03      	cmp	r3, #3
 8005a92:	d817      	bhi.n	8005ac4 <USBD_Get_USB_Status+0x44>
 8005a94:	a201      	add	r2, pc, #4	; (adr r2, 8005a9c <USBD_Get_USB_Status+0x1c>)
 8005a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9a:	bf00      	nop
 8005a9c:	08005aad 	.word	0x08005aad
 8005aa0:	08005ab3 	.word	0x08005ab3
 8005aa4:	08005ab9 	.word	0x08005ab9
 8005aa8:	08005abf 	.word	0x08005abf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005aac:	2300      	movs	r3, #0
 8005aae:	73fb      	strb	r3, [r7, #15]
    break;
 8005ab0:	e00b      	b.n	8005aca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	73fb      	strb	r3, [r7, #15]
    break;
 8005ab6:	e008      	b.n	8005aca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	73fb      	strb	r3, [r7, #15]
    break;
 8005abc:	e005      	b.n	8005aca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005abe:	2302      	movs	r3, #2
 8005ac0:	73fb      	strb	r3, [r7, #15]
    break;
 8005ac2:	e002      	b.n	8005aca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	73fb      	strb	r3, [r7, #15]
    break;
 8005ac8:	bf00      	nop
  }
  return usb_status;
 8005aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bc80      	pop	{r7}
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop

08005ad8 <__libc_init_array>:
 8005ad8:	b570      	push	{r4, r5, r6, lr}
 8005ada:	2600      	movs	r6, #0
 8005adc:	4d0c      	ldr	r5, [pc, #48]	; (8005b10 <__libc_init_array+0x38>)
 8005ade:	4c0d      	ldr	r4, [pc, #52]	; (8005b14 <__libc_init_array+0x3c>)
 8005ae0:	1b64      	subs	r4, r4, r5
 8005ae2:	10a4      	asrs	r4, r4, #2
 8005ae4:	42a6      	cmp	r6, r4
 8005ae6:	d109      	bne.n	8005afc <__libc_init_array+0x24>
 8005ae8:	f000 f822 	bl	8005b30 <_init>
 8005aec:	2600      	movs	r6, #0
 8005aee:	4d0a      	ldr	r5, [pc, #40]	; (8005b18 <__libc_init_array+0x40>)
 8005af0:	4c0a      	ldr	r4, [pc, #40]	; (8005b1c <__libc_init_array+0x44>)
 8005af2:	1b64      	subs	r4, r4, r5
 8005af4:	10a4      	asrs	r4, r4, #2
 8005af6:	42a6      	cmp	r6, r4
 8005af8:	d105      	bne.n	8005b06 <__libc_init_array+0x2e>
 8005afa:	bd70      	pop	{r4, r5, r6, pc}
 8005afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b00:	4798      	blx	r3
 8005b02:	3601      	adds	r6, #1
 8005b04:	e7ee      	b.n	8005ae4 <__libc_init_array+0xc>
 8005b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b0a:	4798      	blx	r3
 8005b0c:	3601      	adds	r6, #1
 8005b0e:	e7f2      	b.n	8005af6 <__libc_init_array+0x1e>
 8005b10:	08005bb0 	.word	0x08005bb0
 8005b14:	08005bb0 	.word	0x08005bb0
 8005b18:	08005bb0 	.word	0x08005bb0
 8005b1c:	08005bb4 	.word	0x08005bb4

08005b20 <memset>:
 8005b20:	4603      	mov	r3, r0
 8005b22:	4402      	add	r2, r0
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d100      	bne.n	8005b2a <memset+0xa>
 8005b28:	4770      	bx	lr
 8005b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b2e:	e7f9      	b.n	8005b24 <memset+0x4>

08005b30 <_init>:
 8005b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b32:	bf00      	nop
 8005b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b36:	bc08      	pop	{r3}
 8005b38:	469e      	mov	lr, r3
 8005b3a:	4770      	bx	lr

08005b3c <_fini>:
 8005b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3e:	bf00      	nop
 8005b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b42:	bc08      	pop	{r3}
 8005b44:	469e      	mov	lr, r3
 8005b46:	4770      	bx	lr
